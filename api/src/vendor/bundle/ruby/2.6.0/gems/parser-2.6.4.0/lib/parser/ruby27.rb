# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby27 < Parser::Base


  def version
    27
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-490,-105,277,214,215,-103,598,-490,-490,-490,599,-111,-490,-490,-490',
'626,-490,-89,225,628,809,605,214,215,-490,809,-490,-490,-490,214,215',
'-75,214,215,465,-96,-490,-490,-107,-490,-490,-490,-490,-490,-105,-109',
'585,585,585,277,863,-99,759,760,-110,808,761,113,114,226,808,821,544',
'592,-104,546,-490,-490,-490,-490,-490,-490,-490,-490,-490,-490,-490',
'-490,-490,-490,-585,625,-490,-490,-490,627,-490,-490,226,276,-490,-111',
'-108,-490,-490,-111,-490,226,-490,597,-490,-96,-490,-490,-103,-490,-490',
'-490,-490,-490,-96,-490,-299,-490,-94,-585,226,-99,-106,-299,-299,-299',
'-586,226,-299,-299,-299,-490,-299,-111,-490,-490,-490,-490,-111,-490',
'276,-490,-299,-299,-299,-96,-490,-490,-96,762,782,-490,-299,-299,-104',
'-299,-299,-299,-299,-299,-107,-99,-96,-108,-99,-107,-105,-109,119,119',
'119,-105,-109,118,118,118,-110,-95,-99,733,-106,-110,-299,-299,-299',
'-299,-299,-299,-299,-299,-299,-299,-299,-299,-299,-299,613,585,-299',
'-299,-299,585,798,-299,-102,-99,-299,829,-109,-299,-299,-105,-299,795',
'-299,596,-299,-274,-299,-299,-107,-299,-299,-299,-299,-299,-103,-299',
'-299,-299,401,-103,796,-110,119,-299,-299,-299,226,118,-106,-299,-299',
'-299,-299,-106,-299,-299,-299,-299,409,-299,874,-299,544,411,410,546',
'-299,-299,615,614,624,-109,-299,-299,592,-299,-299,-299,-299,-299,-104',
'-586,-106,214,215,-104,-98,-97,506,-108,119,119,548,-585,-108,118,118',
'-97,873,782,547,-108,-299,-299,-299,-299,-299,-299,-299,-299,-299,-299',
'-299,-299,-299,-299,277,277,-299,-299,-299,-105,652,119,828,-100,-299',
'119,118,-299,855,226,118,613,-299,613,-299,-98,-299,-299,246,-299,-299',
'-299,-299,-299,-96,-299,-299,-299,-101,-585,-98,-97,877,-299,-299,-299',
'96,97,-105,-299,-299,-299,-299,119,-299,-299,-498,-299,118,-299,581',
'580,534,-498,-582,119,-299,-299,272,272,118,-109,-299,-299,694,-299',
'-299,-299,-299,-299,-98,-97,893,-98,-97,615,614,615,614,616,528,276',
'276,531,119,768,119,-98,-97,118,-272,118,-299,-299,-299,-299,-299,-299',
'-299,-299,-299,-299,-299,-299,-299,-299,-487,897,-299,-299,-299,-498',
'652,-487,98,99,-299,901,-582,-299,613,223,-487,613,-299,613,-299,902',
'-299,-299,-101,-299,-299,-299,-299,-299,709,-299,-589,-299,226,-582',
'648,993,-110,-589,-589,-589,96,97,-589,-589,-589,-299,-589,904,-299',
'-299,647,-100,906,-299,246,-589,-589,-589,-589,544,-299,-299,546,-487',
'-487,-109,-589,-589,-503,-589,-589,-589,-589,-589,-111,908,615,614,611',
'615,614,615,614,618,613,531,243,910,-583,766,245,244,-502,680,-503,-108',
'-589,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589',
'910,-106,-589,-589,-589,-95,797,-589,98,99,-589,-502,226,-589,-589,613',
'-589,221,-589,-104,-589,917,-589,-589,270,-589,-589,-589,-589,-589,-490',
'-589,-589,-589,214,215,-110,-490,615,614,611,613,-583,-103,272,-104',
'-490,-589,919,-495,-589,-589,-589,-589,226,-589,-495,-589,-94,-494,281',
'-487,-589,-589,223,-583,-494,-107,-487,-487,-487,525,-103,-487,-487',
'-487,-337,-487,922,615,614,629,222,-337,-493,-487,923,-487,-487,-487',
'544,-493,-337,543,518,-490,-490,-487,-487,648,-487,-487,-487,-487,-487',
'615,614,620,-496,926,221,-102,852,821,-495,-496,-499,983,226,-589,852',
'821,930,-499,-494,-111,603,-487,-487,-487,-487,-487,-487,-487,-487,-487',
'-487,-487,-487,-487,-487,-337,-337,-487,-487,-487,-99,-487,-487,-493',
'-275,-487,647,517,-487,-487,226,-487,-497,-487,-108,-487,-74,-487,-487',
'-497,-487,-487,-487,-487,-487,-589,-487,-496,-487,222,220,128,-589,932',
'709,-499,-490,-585,263,264,935,-589,-487,-490,-487,-487,-487,-487,-487',
'937,-487,-487,-487,-97,221,939,-589,-487,-487,941,-589,270,-487,-589',
'-589,-589,226,-106,943,-589,-589,-300,-589,570,262,261,246,-497,-300',
'506,504,-589,502,573,493,225,211,-300,82,467,-589,-589,-589,-589,128',
'-589,-589,-589,-589,-589,83,-490,964,965,570,466,970,754,243,-487,84',
'910,245,244,573,1030,581,580,981,222,464,574,-589,-589,-589,-589,-589',
'-589,-589,-589,-589,-589,-589,-589,-589,-589,-300,-300,-589,-589,-589',
'412,653,984,-500,399,-589,581,580,-589,226,-500,574,989,-589,990,-589',
'991,-589,-589,-500,-589,-589,-589,-589,-589,994,-589,-589,-589,565,910',
'562,561,560,570,563,-501,122,123,124,125,126,-589,-501,573,-589,-589',
'-589,-589,910,-589,910,-501,326,-589,-589,-589,-589,-589,325,-589,-589',
'-107,-589,709,1003,568,1005,-500,-500,1007,1009,-589,1009,266,578,577',
'581,580,699,216,213,574,-589,-589,212,-589,-589,-589,-589,-589,565,1009',
'562,561,560,221,563,965,1023,1009,-501,-501,983,1009,729,727,734,226',
'735,592,737,603,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589',
'-589,-589,-589,726,718,-589,-589,-589,246,653,725,716,714,-589,712,710',
'-589,221,709,706,702,-589,754,-589,601,-589,-589,226,-589,-589,-589',
'-589,-589,603,-589,-589,-589,222,220,700,243,699,765,694,245,244,769',
'241,242,770,-589,537,226,-589,-589,-273,-98,683,-589,299,72,73,74,9',
'60,-589,-589,-89,66,67,-107,226,226,70,226,68,69,71,30,31,75,76,222',
'220,783,493,493,77,28,27,107,106,108,109,226,800,19,801,266,806,811',
'642,8,48,301,10,111,110,112,100,59,102,101,103,504,104,113,114,506,96',
'97,44,45,43,246,250,251,252,253,263,264,258,259,254,255,221,239,240',
'246,246,256,257,524,40,694,226,33,246,246,61,62,522,272,63,272,35,243',
'694,249,47,245,244,246,241,242,262,261,247,20,248,821,657,272,94,82',
'85,86,226,87,89,88,90,115,1009,-586,646,83,93,846,260,847,-247,226,821',
'65,854,84,98,99,645,222,220,41,42,105,299,72,73,74,9,60,226,226,641',
'66,67,637,636,-272,70,634,68,69,71,30,31,75,76,122,123,124,125,126,77',
'28,27,107,106,108,109,633,226,19,630,,,,642,8,48,301,10,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252,253',
'263,264,258,259,254,255,221,239,240,,,256,257,595,40,,,33,,,61,62,593',
',63,,35,243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,260,,,,,65,,84,98,99,,222,220,41,42,105,299',
'72,73,74,9,60,,,-290,66,67,,,,70,-290,68,69,71,30,31,75,76,,-290,,,',
'77,28,27,107,106,108,109,,958,19,562,561,560,,563,8,48,301,10,111,110',
'112,100,59,102,101,103,,104,113,114,-299,96,97,44,45,43,221,-299,,,',
',-586,533,-290,-290,-299,221,,,,,463,,988,40,,,33,221,,61,62,986,,63',
'219,35,,,565,47,562,561,560,217,563,,,,20,,,,,94,82,85,86,,87,89,88',
'90,,-299,-299,,83,93,,222,220,,,,65,718,84,98,99,,222,220,41,42,105',
'299,72,73,74,9,60,,222,220,66,67,,,,70,,68,69,71,30,31,75,76,122,123',
'124,125,126,77,28,27,107,106,108,109,,565,19,562,561,560,,563,8,48,301',
'10,111,110,112,100,59,102,101,103,,104,113,114,221,96,97,44,45,43,-299',
'462,221,,,,246,-299,718,640,463,,-586,,,,-299,722,638,40,,,33,-300,',
'61,62,,,63,-300,35,,,,47,,,243,-300,,,245,244,20,241,242,,,94,82,85',
'86,,87,89,88,90,,222,220,,83,93,,-299,-299,222,220,,65,,84,98,99,,,',
'41,42,105,299,72,73,74,9,60,,-300,-300,66,67,,,,70,,68,69,71,30,31,75',
'76,122,123,124,125,126,77,28,27,107,106,108,109,,565,19,562,561,560',
',563,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
'44,45,43,246,250,251,252,253,263,264,258,259,254,255,,239,240,,,256',
'257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247',
'20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,260,,,,,65,,84,98,99,',
',,41,42,105,5,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,',
',,77,28,27,107,106,108,109,,958,19,562,561,560,,563,8,48,7,10,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252',
'253,263,264,258,259,254,255,,239,240,,,256,257,,40,,,33,,,61,62,,,63',
',35,243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,',
'87,89,88,90,,,,,83,93,226,260,,,,,65,,84,98,99,,,,41,42,105,299,72,73',
'74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108',
'109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,44,45,43,246,250,251,252,253,263,264,258,259,254,255,,239,240',
',,256,257,,40,,,303,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262',
'261,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,260,,,,,65,,84',
'98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252,253',
'263,264,258,259,254,255,,239,240,,,256,257,,40,,,33,,,61,62,,,63,,35',
'243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,260,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,',
',19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,246,250,251,252,253,263,264,258,259,254,255,,239,240,,,256',
'257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247',
'20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,260,,,,,65,,84,98,99,',
',,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,',
',,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59',
'102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252,253,263,264',
'258,259,254,255,,239,240,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249',
'47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,260,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66',
'67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,565,19',
'562,561,560,,563,8,48,301,10,111,110,112,100,59,102,101,103,,104,113',
'114,,96,97,44,45,43,565,,562,561,560,,563,,718,,565,,562,561,560,,563',
'722,,40,,,33,,,61,62,,,63,,35,,,,47,,718,,,,,,,20,,722,718,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73',
'74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108',
'109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,44,45,43,246,-610,-610,-610,-610,263,264,,,-610,-610,,,,,,256',
'257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247',
'20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77',
'28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101',
'103,,104,113,114,,96,97,44,45,43,246,250,251,252,253,263,264,258,259',
'254,255,,-610,-610,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245',
'244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68',
'69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10',
'111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,250',
'251,252,253,263,264,,,254,255,,,,,,256,257,,40,,,33,,,61,62,,,63,,35',
'243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,',
',66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19',
',,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
'44,45,43,246,,,,,,,,,,,,,,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249',
'47,245,244,,241,242,,,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,,,,65,,84,98,99,,,,41,42,105,5,72,73,74,9,60,,,,66,67,,,,70,,68',
'69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,7,10',
'111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,250',
'251,252,253,263,264,258,259,254,255,,-610,-610,,,256,257,,40,,,33,,',
'61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299',
'72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,246,250,251,252,253,263,264,258,,254,255,,,',
',,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262',
'261,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98',
'99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252,253,263',
'264,258,259,254,255,,-610,-610,,,256,257,,40,,,303,,,61,62,,,63,,35',
'243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,',
',66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19',
',,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
'44,45,43,246,-610,-610,-610,-610,263,264,,,-610,-610,,,,,,256,257,,40',
',,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247,20,248',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27',
'107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,246,-610,-610,-610,-610,263,264,,,-610',
'-610,,,,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241',
'242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65',
',84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,,,,,,,,,,,,',
',,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,,',
'247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
',,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,246,-610,-610,-610,-610',
'263,264,,,-610,-610,,,,,,256,257,,40,,,303,,,61,62,,,63,,35,243,,249',
'47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,',
'8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,246,-610,-610,-610,-610,263,264,,,-610,-610,,,,,,256,257,,40,,,33',
',,61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247,20,248,,,',
'94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299',
'72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,246,250,251,252,253,263,264,258,259,254,255',
',-610,-610,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,',
'241,242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,',
',,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111',
'110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,-610,-610',
'-610,-610,263,264,,,-610,-610,,,,,,256,257,,40,,,33,,,61,62,,,63,,35',
'243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,',
',66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19',
',,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
'44,45,43,246,,,,,,,,,,,,,,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249',
'47,245,244,,241,242,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,',
',,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111',
'110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,,,,,,,,',
',,,,,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,,47,245,244,,241,242,',
',,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77',
'28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101',
'103,,104,113,114,,96,97,44,45,43,246,,,,,,,,,,,,,,,,256,257,,40,,,33',
',,61,62,,,63,,35,243,,249,47,245,244,,241,242,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,',
',19,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,19,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113',
'114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47',
',,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
',,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,',
'77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112,100,59,102,101',
'103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62',
',,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,',
',65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,9,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,',
'10,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,',
',,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,61,62,,,63,,,,,,,,,,,,,,,,,',
',,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60',
'105,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,417,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28',
'27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,',
'104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63',
',417,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,',
'111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,',
',,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,',
',238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290',
',288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,',
',,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,774,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,',
',,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,',
',48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,',
',,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288,,47',
',,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,',
'111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,',
',,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,226,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,9',
'60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,',
',,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,401,65,,84,98,99,,',
',41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,',
'77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101',
'103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62',
',,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,',
',,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,',
',,231,,,237,,,61,62,,,63,,,,288,,47,,,294,,,,,,236,,,,,94,291,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109',
',,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
',,322,,,,,,,,,,,,,,,,,,,,945,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105',
',,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109',
',,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,677,,288,,47',
',,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75',
'76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,,10,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40',
',,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,',
',111,110,112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,',
',,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236,',
',,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290',
',288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,',
',,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,',
',,231,,,237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236,,,,,94,291,85',
'86,,87,89,88,90,,,,,83,93,226,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,,,322,,,,,,,,,,,,,,,,,,,,951,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,',
',,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60',
'105,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,,,322,,,,,,,,,,,,,,,,,,,,945,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,',
',,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,9,60',
'105,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,19,,,,,,8,48,,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75',
'76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,288,,47,,,294,,,,,,236',
',,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42',
'105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
'293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62',
',,63,,677,,288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,',
'83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,316',
',,111,110,112,100,59,102,101,103,,104,113,114,,96,97,,,322,,,,,,,,,',
',,,,,,,,,,361,,,33,,,61,62,,,63,,35,,,,,,,,,,,,,,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,,,47,,,,,,,,,236,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288',
',47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65',
',84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59',
'102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290',
',288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,',
',,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,294,,,,,,236,,,',
',94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293',
'104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63',
',677,,,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,',
',,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,',
',111,110,112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,',
',,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236,',
',,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290',
',288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,',
',,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,',
',,231,,,237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236,,,,,94,291,85',
'86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,61,62,,,63,,307,,,,,,,,,,,,',
',,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74',
',60,105,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106',
'108,109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,,,322,,,,,,,,,,,,,,,,,,,,312,,,237,,,61,62,,,63,,,,,,,,,,,,,',
',,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,324,,,65,,84,98,99,72,73',
'74,,60,105,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107',
'106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113',
'114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47',
',,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
',,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,',
',,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,61,62,,,63,,,,,',
',,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
'72,73,74,,60,105,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75',
'76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288,,47',
',,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,,10,111,110,112,100,59',
'102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33',
',,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111',
'110,112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,',
',,,,,,,,,,231,,,237,,,61,62,,,63,,290,,,,47,,,294,,,,,,236,,,,,94,291',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,',
'294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98',
'99,,,,41,42,105,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,',
',,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,,10,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61',
'62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,',
'111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,',
',,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,',
',19,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,119,,,,,118,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,316,,,111,110',
'112,366,59,102,101,367,,104,113,114,,96,97,,,322,,,,,,,,,,,,,,,,,373',
',,368,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105,,,66,67,,,,70,,68,69,71',
'318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,316,,,111',
'110,112,366,59,102,101,367,,104,113,114,,96,97,,,322,,,,,,,,,,,,,,,',
',,,,368,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,,,,,,105,178,189,179,202,175,195,185',
'184,205,206,200,183,182,177,203,207,208,187,176,190,194,196,188,181',
',,,197,204,199,384,383,385,382,174,193,192,,,,,,173,180,171,172,379',
'380,381,377,133,102,101,378,,104,,,,,,162,163,,159,141,142,143,150,147',
'149,,,144,145,,,,164,165,151,152,,,,,,389,,,,,,,,156,155,,140,161,158',
'157,166,153,154,148,146,138,160,139,,,167,,,,,,72,73,74,9,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,105,77,28,27,107,106,108,109,,,19,,',
',,,8,48,7,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,',
'94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,401,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,,,322,,,,,,,,,,,,,,,,,,,,312,,,237,,,61,62,,,63,,,,,',
',,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,520,,,65,,84,98',
'99,72,73,74,,60,105,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
'293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62',
',,63,,,,288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83',
'93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,',
',,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,',
',,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,677,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,',
',,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,',
'111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,',
',,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109',
',,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
',,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105',
',,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109',
',,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75',
'76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,537,,61,62,,,63,,,,,,47,,,',
',,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,',
',,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,',
',77,315,321,107,106,108,109,,,238,,,,,,,316,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,72,73,74,,60,105,,,66,67,,,,70,,68,69,71,318,319,75,76',
',,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59',
'102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237',
',,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111',
'110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,',
',,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
'9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108',
'109,,,19,,,,,,8,48,7,10,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,',
',,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,',
',,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,',
',77,315,321,107,106,108,109,,,238,,,,,,,316,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,72,73,74,,60,105,,,66,67,,,,70,,68,69,71,318,319,75,76',
',,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59',
'102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237',
',,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,',
',48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,',
',,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,417,,,,47,,,,,,,,,236',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'61,62,,565,63,562,561,560,570,563,47,,,,,,,,573,20,,,,,94,82,85,86,',
'87,89,88,90,,,,,83,93,,568,,,,,65,,84,98,99,-591,581,580,41,42,105,574',
'-591,-591,-591,,,-591,-591,-591,,-591,,,,,,,,,-591,-591,-591,-591,,',
',,,,,-591,-591,,-591,-591,-591,-591,-591,,,,,,,,,,,,,,,,,,,,,,,-591',
'-591,-591,-591,-591,-591,-591,-591,-591,-591,-591,-591,-591,-591,,,-591',
'-591,-591,,,-591,,,-591,,,-591,-591,,-591,,-591,,-591,,-591,-591,,-591',
'-591,-591,-591,-591,,-591,-591,-591,,,,,,565,,562,561,560,570,563,,-591',
',,-591,-591,-591,-591,573,-591,,-591,-590,,,,-591,-591,,-590,-590,-590',
',,-590,-590,-590,,-590,,568,,,,,,,-590,-590,-590,-590,581,580,,,,574',
',-590,-590,,-590,-590,-590,-590,-590,,,,,,,,,,,,,,,,,,,,,,,-590,-590',
'-590,-590,-590,-590,-590,-590,-590,-590,-590,-590,-590,-590,,,-590,-590',
'-590,,,-590,,,-590,,,-590,-590,,-590,,-590,,-590,,-590,-590,,-590,-590',
'-590,-590,-590,,-590,-590,-590,,,,,,565,,562,561,560,570,563,,-590,',
',-590,-590,-590,-590,573,-590,,-590,-415,,,,-590,-590,,-415,-415,-415',
',,-415,-415,-415,,-415,,568,,,,,,,-415,-415,-415,,581,580,,,,574,,-415',
'-415,,-415,-415,-415,-415,-415,,,,,,,,,,,,,,,,,,,,,,,-415,-415,-415',
'-415,-415,-415,-415,-415,-415,-415,-415,-415,-415,-415,,,-415,-415,-415',
',,-415,,272,-415,,,-415,-415,,-415,,-415,,-415,,-415,-415,,-415,-415',
'-415,-415,-415,,-415,-415,-415,565,,562,561,560,570,563,,,,,,,-415,',
'573,-415,-415,-255,-415,,-415,,,,-255,-255,-255,-415,-415,-255,-255',
'-255,,-255,,,568,551,,,,,-255,-255,-255,578,577,581,580,,,,574,-255',
'-255,,-255,-255,-255,-255,-255,,,,,,,,,,,,,,,,,,,,,,,-255,-255,-255',
'-255,-255,-255,-255,-255,-255,-255,-255,-255,-255,-255,,,-255,-255,-255',
',,-255,,272,-255,,,-255,-255,,-255,,-255,,-255,,-255,-255,,-255,-255',
'-255,-255,-255,-291,-255,-255,-255,,,,-291,-291,-291,,,-291,-291,-291',
',-291,-255,,,-255,-255,,-255,,-255,-291,-291,-291,,,,-255,-255,,,-291',
'-291,,-291,-291,-291,-291,-291,,,,,,,,,,,,,,,,,,,,,,,-291,-291,-291',
'-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,,,-291,-291,-291',
',,-291,,,-291,,,-291,-291,,-291,,-291,,-291,,-291,-291,,-291,-291,-291',
'-291,-291,,-291,-306,-291,,,,,,-306,-306,-306,,,-306,-306,-306,-291',
'-306,,-291,-291,-291,-291,,-291,,-291,-306,-306,,,-291,-291,,,,,-306',
'-306,,-306,-306,-306,-306,-306,,,,,,,,,,,,,,,,,,,,,,,-306,-306,-306',
'-306,-306,-306,-306,-306,-306,-306,-306,-306,-306,-306,,,-306,-306,-306',
',,-306,,281,-306,,,-306,-306,,-306,,-306,,-306,,-306,-306,,-306,-306',
'-306,-306,-306,,-306,-255,-306,,,,,,-255,-255,-255,,,-255,-255,-255',
'-306,-255,,-306,-306,,-306,,-306,,-255,-255,,,,-306,-306,,,,,-255,-255',
',-255,-255,-255,-255,-255,,,,,,,,453,443,,,454,,,,,,,,162,163,,159,141',
'142,143,150,147,149,,,144,145,-255,,,164,165,151,152,-255,,,,,272,-255',
',,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160,139,-255',
'-255,167,,,,,,,,,,,,,-255,,,-255,,,,,-255,,,,,,,-255,178,189,179,202',
'175,195,185,184,205,206,200,183,182,177,203,207,208,187,176,190,194',
'196,188,181,,,,197,204,199,198,191,201,186,174,193,192,,,,,,173,180',
'171,172,168,169,170,131,133,,,132,,,,,,,,162,163,,159,141,142,143,150',
'147,149,,,144,145,,,,164,165,151,152,,,,,,,,,,,,,,156,155,,140,161,158',
'157,166,153,154,148,146,138,160,139,,,167,94,,,,,,,,,,,,,,93,178,189',
'179,202,175,195,185,184,205,206,200,183,182,177,203,207,208,187,176',
'190,194,196,188,181,,,,197,204,199,198,191,201,186,174,193,192,,,,,',
'173,180,171,172,168,169,170,131,133,,,132,,,,,,,,162,163,,159,141,142',
'143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,,,,,,,,,156,155,,140',
'161,158,157,166,153,154,148,146,138,160,139,,,167,94,,,,,,,,,,,,,,93',
'178,189,179,202,175,195,185,184,205,206,200,183,182,177,203,207,208',
'187,176,190,194,196,188,181,,,,197,204,199,198,191,201,186,174,193,192',
',,,,,173,180,171,172,168,169,170,131,133,,,132,,,,,,,,162,163,,159,141',
'142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,,,,,,,,,156,155',
',140,161,158,157,166,153,154,148,146,138,160,139,,,167,94,,,,,,,,,,',
',,,93,178,189,179,202,175,195,185,184,205,206,200,183,182,177,203,207',
'208,187,176,190,194,196,188,181,,,,197,204,199,198,191,201,186,174,193',
'192,,,,,,173,180,171,172,168,169,170,131,133,130,,132,,,,,,,,162,163',
',159,141,142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,,,,,',
',,,156,155,,140,161,158,157,166,153,154,148,146,138,160,139,,,167,94',
',,,,,,,,,,,,,93,178,189,179,202,175,195,185,184,205,206,200,183,182',
'177,203,207,208,187,176,190,194,196,188,181,,,,197,204,199,198,191,201',
'186,174,193,192,,,,,,173,180,171,172,168,169,170,131,133,,,132,,,,,',
',,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151,152',
',,,,,,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160,139',
'446,450,167,,445,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145',
',,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153',
'154,148,146,138,160,139,779,450,167,,778,,,,,,,,162,163,,159,141,142',
'143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155',
',140,161,158,157,166,153,154,148,146,138,160,139,742,450,167,,743,,',
',,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151,152',
',,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160',
'139,660,450,167,,661,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144',
'145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166',
'153,154,148,146,138,160,139,658,443,167,,659,,,,,,,,162,163,,159,141',
'142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156',
'155,,140,161,158,157,166,153,154,148,146,138,160,139,1018,450,167,,1019',
',,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151',
'152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138',
'160,139,1013,450,167,,1012,,,,,,,,162,163,,159,141,142,143,150,147,149',
',,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157',
'166,153,154,148,146,138,160,139,453,443,167,,454,,,,,,,,162,163,,159',
'141,142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,,,,,,,,,156',
'155,,140,161,158,157,166,153,154,148,146,138,160,139,453,443,167,,454',
',,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151',
'152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138',
'160,139,745,450,167,,746,,,,,,,,162,163,,159,141,142,143,150,147,149',
',,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157',
'166,153,154,148,146,138,160,139,1016,443,167,,1017,,,,,,,,162,163,,159',
'141,142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,272,,,,,,',
',156,155,,140,161,158,157,166,153,154,148,146,138,160,139,658,443,167',
',659,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165',
'151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146',
'138,160,139,660,450,167,,661,,,,,,,,162,163,,159,141,142,143,150,147',
'149,,,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158',
'157,166,153,154,148,146,138,160,139,740,443,167,,741,,,,,,,,162,163',
',159,141,142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,272,',
',,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160,139,687,443',
'167,,688,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164',
'165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154,148',
'146,138,160,139,690,450,167,,691,,,,,,,,162,163,,159,141,142,143,150',
'147,149,,,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161',
'158,157,166,153,154,148,146,138,160,139,776,443,167,,777,,,,,,,,162',
'163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,272',
',,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160,139,439',
'443,167,,440,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,',
',,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154',
'148,146,138,160,139,,565,167,562,561,560,570,563,,565,,562,561,560,570',
'563,573,,,,,,,,573,,565,,562,561,560,570,563,,,,,,568,,,573,,,,,568',
'578,577,581,580,,,,574,578,577,581,580,,,,574,568,,565,,562,561,560',
'570,563,578,577,581,580,,,,574,573,,565,,562,561,560,570,563,,565,,562',
'561,560,570,563,573,,,,,568,,,573,,,,,,578,577,581,580,,,,574,568,,',
',,,,,568,578,577,581,580,,,,574,578,577,581,580,,,565,574,562,561,560',
'570,563,,565,,562,561,560,570,563,573,,,,,,,,573,,565,,562,561,560,570',
'563,,,,,,568,,,573,,,,,568,,,581,580,,,,574,578,577,581,580,,,,574,568',
',565,,562,561,560,570,563,578,577,581,580,,,,574,573,,565,,562,561,560',
'570,563,,565,,562,561,560,570,563,573,,,,,568,,,573,,,,,,,,581,580,',
',,574,568,,,,,,,,568,,,581,580,,,,574,578,577,581,580,,,565,574,562',
'561,560,570,563,565,,562,561,560,570,563,565,573,562,561,560,570,563',
'565,573,562,561,560,570,563,,573,,,,,,,573,568,,,,,,,568,,,,581,580',
',568,,574,,581,580,,568,,574,,581,580,,,,574,,581,580,,,,574' ]
        racc_action_table = arr = ::Array.new(26933, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'103,857,64,458,458,358,368,103,103,103,368,952,103,103,103,396,103,682',
'19,397,802,372,697,697,103,671,103,103,103,610,610,682,349,349,232,816',
'103,103,1018,103,103,103,103,103,1028,1019,350,351,918,667,752,688,614',
'614,989,802,614,614,614,19,671,921,341,921,359,341,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,1013,396,103,103,103,397,103,103',
'1015,64,103,362,741,103,103,232,103,458,103,363,103,816,103,103,948',
'103,103,103,103,103,857,103,661,103,358,1018,697,688,1016,661,661,661',
'1019,610,661,661,661,103,661,952,103,103,103,103,952,103,667,103,661',
'661,661,816,103,103,816,614,870,103,661,661,949,661,661,661,661,661',
'1018,688,816,1017,688,1018,1028,1019,350,351,918,1028,1019,350,351,918',
'989,359,688,587,740,989,661,661,661,661,661,661,661,661,661,661,661',
'661,661,661,395,896,661,661,661,738,661,661,362,741,661,704,743,661',
'661,870,661,658,661,361,661,773,661,661,742,661,661,661,661,661,948',
'661,778,661,357,948,659,596,3,778,778,778,775,3,1016,778,778,661,778',
'1016,661,661,661,661,130,661,799,661,344,130,130,344,661,661,395,395',
'395,661,778,778,356,778,778,778,778,778,949,743,658,606,606,949,690',
'687,345,1017,297,587,343,742,1017,297,587,740,784,643,342,659,778,778',
'778,778,778,778,778,778,778,778,778,778,778,778,317,26,778,778,778,799',
'778,896,704,743,778,738,896,778,738,338,738,623,778,392,778,742,778',
'778,332,778,778,778,778,778,643,778,445,778,596,690,690,687,805,445',
'445,445,43,43,643,445,445,778,445,866,778,778,379,778,866,778,709,709',
'330,379,366,606,778,778,317,26,606,778,445,445,815,445,445,445,445,445',
'690,687,819,690,687,623,623,392,392,392,323,317,26,326,861,623,355,690',
'687,861,822,355,445,445,445,445,445,445,445,445,445,445,445,445,445',
'445,366,823,445,445,445,379,445,366,43,43,445,830,366,445,508,424,366',
'621,445,393,445,831,445,445,326,445,445,445,445,445,832,445,660,445',
'956,366,777,956,326,660,660,660,322,322,660,660,660,445,660,836,445',
'445,776,445,837,445,470,660,660,660,660,703,445,445,703,366,366,445',
'660,660,39,660,660,660,660,660,424,839,508,508,508,621,621,393,393,393',
'391,464,470,840,367,621,470,470,229,508,230,777,660,660,660,660,660',
'660,660,660,660,660,660,660,660,660,842,776,660,660,660,39,660,660,322',
'322,660,38,845,660,660,398,660,387,660,39,660,850,660,660,387,660,660',
'660,660,660,367,660,660,660,14,14,464,367,391,391,391,394,367,229,321',
'230,367,660,853,385,660,660,660,660,316,660,385,660,38,384,315,100,660',
'660,17,367,384,660,100,100,100,312,38,100,100,100,49,100,858,398,398',
'398,387,49,383,100,860,100,100,100,340,383,49,340,306,367,367,100,100',
'440,100,100,100,100,100,394,394,394,382,864,982,17,1000,1000,385,382',
'381,982,865,745,728,728,868,381,384,17,982,100,100,100,100,100,100,100',
'100,100,100,100,100,100,100,49,49,100,100,100,440,100,100,383,869,100',
'439,305,100,100,304,100,380,100,440,100,302,100,100,380,100,100,100',
'100,100,745,100,382,100,982,982,301,745,878,879,381,378,745,46,46,881',
'745,100,378,377,100,100,100,100,882,100,377,100,439,24,883,779,100,100',
'885,745,24,100,779,779,779,886,439,887,779,779,525,779,706,46,46,471',
'380,525,289,286,779,285,706,271,238,10,525,80,234,745,745,779,779,7',
'779,779,779,779,779,80,378,915,916,932,233,925,929,471,377,80,1021,471',
'471,932,1024,706,706,942,24,231,706,779,779,779,779,779,779,779,779',
'779,779,779,779,779,779,525,525,779,779,779,209,779,945,309,115,779',
'932,932,779,48,309,932,951,779,954,779,955,779,779,309,779,779,779,779',
'779,960,779,779,779,808,961,808,808,808,808,808,310,513,513,513,513',
'513,779,310,808,779,779,446,779,962,779,963,310,40,446,446,446,779,779',
'37,446,446,779,446,972,975,808,976,309,309,977,978,446,980,22,808,808',
'808,808,985,15,13,808,446,446,12,446,446,446,446,446,965,1025,965,965',
'965,944,965,999,1001,1026,310,310,944,1027,584,582,588,808,589,590,591',
'944,446,446,446,446,446,446,446,446,446,446,446,446,446,446,579,965',
'446,446,446,485,446,575,567,558,446,557,556,446,370,554,553,541,446',
'608,446,370,446,446,540,446,446,446,446,446,370,446,446,446,944,944',
'539,485,538,618,529,485,485,626,485,485,628,446,526,521,446,446,635',
'446,519,446,354,354,354,354,354,354,446,446,516,354,354,446,515,499',
'354,495,354,354,354,354,354,354,354,370,370,644,649,654,354,354,354',
'354,354,354,354,662,663,354,664,666,670,672,428,354,354,354,354,354',
'354,354,354,354,354,354,354,674,354,354,354,676,354,354,354,354,354',
'428,428,428,428,428,428,428,428,428,428,428,311,428,428,475,474,428',
'428,311,354,684,686,354,473,472,354,354,311,689,354,692,354,428,693',
'428,354,428,428,696,428,428,428,428,428,354,428,698,460,447,354,354',
'354,354,705,354,354,354,354,1,1035,1012,438,354,354,720,428,721,428',
'723,730,354,736,354,354,354,437,311,311,354,354,354,856,856,856,856',
'856,856,739,435,425,856,856,421,418,416,856,415,856,856,856,856,856',
'856,856,300,300,300,300,300,856,856,856,856,856,856,856,413,748,856',
'407,,,,434,856,856,856,856,856,856,856,856,856,856,856,856,,856,856',
'856,,856,856,856,856,856,434,434,434,434,434,434,434,434,434,434,434',
'360,434,434,,,434,434,360,856,,,856,,,856,856,360,,856,,856,434,,434',
'856,434,434,,434,434,434,434,434,856,434,,,,856,856,856,856,,856,856',
'856,856,,,,,856,856,,434,,,,,856,,856,856,856,,360,360,856,856,856,899',
'899,899,899,899,899,,,313,899,899,,,,899,313,899,899,899,899,899,899',
'899,,313,,,,899,899,899,899,899,899,899,,993,899,993,993,993,,993,899',
'899,899,899,899,899,899,899,899,899,899,899,,899,899,899,691,899,899',
'899,899,899,327,691,,,,,691,327,313,313,691,950,,,,,327,,950,899,,,899',
'16,,899,899,950,,899,16,899,,,847,899,847,847,847,16,847,,,,899,,,,',
'899,899,899,899,,899,899,899,899,,691,691,,899,899,,327,327,,,,899,847',
'899,899,899,,950,950,899,899,899,607,607,607,607,607,607,,16,16,607',
'607,,,,607,,607,607,607,607,607,607,607,337,337,337,337,337,607,607',
'607,607,607,607,607,,846,607,846,846,846,,846,607,607,607,607,607,607',
'607,607,607,607,607,607,,607,607,607,228,607,607,607,607,607,746,228',
'423,,,,486,746,846,423,228,,746,,,,746,846,423,607,,,607,599,,607,607',
',,607,599,607,,,,607,,,486,599,,,486,486,607,486,486,,,607,607,607,607',
',607,607,607,607,,228,228,,607,607,,746,746,423,423,,607,,607,607,607',
',,,607,607,607,583,583,583,583,583,583,,599,599,583,583,,,,583,,583',
'583,583,583,583,583,583,6,6,6,6,6,583,583,583,583,583,583,583,,722,583',
'722,722,722,,722,583,583,583,583,583,583,583,583,583,583,583,583,,583',
'583,583,,583,583,583,583,583,781,781,781,781,781,781,781,781,781,781',
'781,,781,781,,,781,781,,583,,,583,,,583,583,,,583,,583,781,,781,583',
'781,781,,781,781,781,781,781,583,781,,,,583,583,583,583,,583,583,583',
'583,,,,,583,583,,781,,,,,583,,583,583,583,,,,583,583,583,0,0,0,0,0,0',
',,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,901,0,901,901,901,,901',
'0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,489,489,489,489,489,489,489',
'489,489,489,489,,489,489,,,489,489,,0,,,0,,,0,0,,,0,,0,489,,489,0,489',
'489,,489,489,489,489,489,0,489,,,,0,0,0,0,,0,0,0,0,,,,,0,0,489,489,',
',,,0,,0,0,0,,,,0,0,0,308,308,308,308,308,308,,,,308,308,,,,308,,308',
'308,308,308,308,308,308,,,,,,308,308,308,308,308,308,308,,,308,,,,,',
'308,308,308,308,308,308,308,308,308,308,308,308,,308,308,308,,308,308',
'308,308,308,875,875,875,875,875,875,875,875,875,875,875,,875,875,,,875',
'875,,308,,,308,,,308,308,,,308,,308,875,,875,308,875,875,,875,875,875',
'875,875,308,875,,,,308,308,308,308,,308,308,308,308,,,,,308,308,,875',
',,,,308,,308,308,308,,,,308,308,308,353,353,353,353,353,353,,,,353,353',
',,,353,,353,353,353,353,353,353,353,,,,,,353,353,353,353,353,353,353',
',,353,,,,,,353,353,353,353,353,353,353,353,353,353,353,353,,353,353',
'353,,353,353,353,353,353,283,283,283,283,283,283,283,283,283,283,283',
',283,283,,,283,283,,353,,,353,,,353,353,,,353,,353,283,,283,353,283',
'283,,283,283,283,283,283,353,283,,,,353,353,353,353,,353,353,353,353',
',,,,353,353,,283,,,,,353,,353,353,353,,,,353,353,353,862,862,862,862',
'862,862,,,,862,862,,,,862,,862,862,862,862,862,862,862,,,,,,862,862',
'862,862,862,862,862,,,862,,,,,,862,862,862,862,862,862,862,862,862,862',
'862,862,,862,862,862,,862,862,862,862,862,536,536,536,536,536,536,536',
'536,536,536,536,,536,536,,,536,536,,862,,,862,,,862,862,,,862,,862,536',
',536,862,536,536,,536,536,536,536,536,862,536,,,,862,862,862,862,,862',
'862,862,862,,,,,862,862,,536,,,,,862,,862,862,862,,,,862,862,862,237',
'237,237,237,237,237,,,,237,237,,,,237,,237,237,237,237,237,237,237,',
',,,,237,237,237,237,237,237,237,,,237,,,,,,237,237,237,237,237,237,237',
'237,237,237,237,237,,237,237,237,,237,237,237,237,237,21,21,21,21,21',
'21,21,21,21,21,21,,21,21,,,21,21,,237,,,237,,,237,237,,,237,,237,21',
',21,237,21,21,,21,21,21,21,21,237,21,,,,237,237,237,237,,237,237,237',
'237,,,,,237,237,,21,,,,,237,,237,237,237,,,,237,237,237,893,893,893',
'893,893,893,,,,893,893,,,,893,,893,893,893,893,893,893,893,,,,,,893',
'893,893,893,893,893,893,,718,893,718,718,718,,718,893,893,893,893,893',
'893,893,893,893,893,893,893,,893,893,893,,893,893,893,893,893,568,,568',
'568,568,,568,,718,,964,,964,964,964,,964,718,,893,,,893,,,893,893,,',
'893,,893,,,,893,,568,,,,,,,893,,568,964,,893,893,893,893,,893,893,893',
'893,,,,,893,893,,,,,,,893,,893,893,893,,,,893,893,893,900,900,900,900',
'900,900,,,,900,900,,,,900,,900,900,900,900,900,900,900,,,,,,900,900',
'900,900,900,900,900,,,900,,,,,,900,900,900,900,900,900,900,900,900,900',
'900,900,,900,900,900,,900,900,900,900,900,482,482,482,482,482,482,482',
',,482,482,,,,,,482,482,,900,,,900,,,900,900,,,900,,900,482,,482,900',
'482,482,,482,482,482,482,482,900,482,,,,900,900,900,900,,900,900,900',
'900,,,,,900,900,,,,,,,900,,900,900,900,,,,900,900,900,810,810,810,810',
'810,810,,,,810,810,,,,810,,810,810,810,810,810,810,810,,,,,,810,810',
'810,810,810,810,810,,,810,,,,,,810,810,810,810,810,810,810,810,810,810',
'810,810,,810,810,810,,810,810,810,810,810,469,469,469,469,469,469,469',
'469,469,469,469,,469,469,,,469,469,,810,,,810,,,810,810,,,810,,810,469',
',469,810,469,469,,469,469,469,469,469,810,469,,,,810,810,810,810,,810',
'810,810,810,,,,,810,810,,,,,,,810,,810,810,810,,,,810,810,810,336,336',
'336,336,336,336,,,,336,336,,,,336,,336,336,336,336,336,336,336,,,,,',
'336,336,336,336,336,336,336,,,336,,,,,,336,336,336,336,336,336,336,336',
'336,336,336,336,,336,336,336,,336,336,336,336,336,487,487,487,487,487',
'487,487,,,487,487,,,,,,487,487,,336,,,336,,,336,336,,,336,,336,487,',
'487,336,487,487,,487,487,487,487,487,336,487,,,,336,336,336,336,,336',
'336,336,336,,,,,336,336,,,,,,,336,,336,336,336,,,,336,336,336,876,876',
'876,876,876,876,,,,876,876,,,,876,,876,876,876,876,876,876,876,,,,,',
'876,876,876,876,876,876,876,,,876,,,,,,876,876,876,876,876,876,876,876',
'876,876,876,876,,876,876,876,,876,876,876,876,876,535,,,,,,,,,,,,,,',
',535,535,,876,,,876,,,876,876,,,876,,876,535,,535,876,535,535,,535,535',
',,535,876,535,,,,876,876,876,876,,876,876,876,876,,,,,876,876,,,,,,',
'876,,876,876,876,,,,876,876,876,128,128,128,128,128,128,,,,128,128,',
',,128,,128,128,128,128,128,128,128,,,,,,128,128,128,128,128,128,128',
',,128,,,,,,128,128,128,128,128,128,128,128,128,128,128,128,,128,128',
'128,,128,128,128,128,128,328,328,328,328,328,328,328,328,328,328,328',
',328,328,,,328,328,,128,,,128,,,128,128,,,128,,128,328,,328,128,328',
'328,,328,328,328,328,328,128,328,,,,128,128,128,128,,128,128,128,128',
',,,,128,128,,,,,,,128,,128,128,128,,,,128,128,128,947,947,947,947,947',
'947,,,,947,947,,,,947,,947,947,947,947,947,947,947,,,,,,947,947,947',
'947,947,947,947,,,947,,,,,,947,947,947,947,947,947,947,947,947,947,947',
'947,,947,947,947,,947,947,947,947,947,488,488,488,488,488,488,488,488',
',488,488,,,,,,488,488,,947,,,947,,,947,947,,,947,,947,488,,488,947,488',
'488,,488,488,488,488,488,947,488,,,,947,947,947,947,,947,947,947,947',
',,,,947,947,,,,,,,947,,947,947,947,,,,947,947,947,303,303,303,303,303',
'303,,,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303,303',
'303,303,303,303,,,303,,,,,,303,303,303,303,303,303,303,303,303,303,303',
'303,,303,303,303,,303,303,303,303,303,329,329,329,329,329,329,329,329',
'329,329,329,,329,329,,,329,329,,303,,,303,,,303,303,,,303,,303,329,',
'329,303,329,329,,329,329,329,329,329,303,329,,,,303,303,303,303,,303',
'303,303,303,,,,,303,303,,,,,,,303,,303,303,303,,,,303,303,303,744,744',
'744,744,744,744,,,,744,744,,,,744,,744,744,744,744,744,744,744,,,,,',
'744,744,744,744,744,744,744,,,744,,,,,,744,744,744,744,744,744,744,744',
'744,744,744,744,,744,744,744,,744,744,744,744,744,479,479,479,479,479',
'479,479,,,479,479,,,,,,479,479,,744,,,744,,,744,744,,,744,,744,479,',
'479,744,479,479,,479,479,479,479,479,744,479,,,,744,744,744,744,,744',
'744,744,744,,,,,744,744,,,,,,,744,,744,744,744,,,,744,744,744,821,821',
'821,821,821,821,,,,821,821,,,,821,,821,821,821,821,821,821,821,,,,,',
'821,821,821,821,821,821,821,,,821,,,,,,821,821,821,821,821,821,821,821',
'821,821,821,821,,821,821,821,,821,821,821,821,821,480,480,480,480,480',
'480,480,,,480,480,,,,,,480,480,,821,,,821,,,821,821,,,821,,821,480,',
'480,821,480,480,,480,480,480,480,480,821,480,,,,821,821,821,821,,821',
'821,821,821,,,,,821,821,,,,,,,821,,821,821,821,,,,821,821,821,211,211',
'211,211,211,211,,,,211,211,,,,211,,211,211,211,211,211,211,211,,,,,',
'211,211,211,211,211,211,211,,,211,,,,,,211,211,211,211,211,211,211,211',
'211,211,211,211,,211,211,211,,211,211,211,211,211,490,,,,,,,,,,,,,,',
',490,490,,211,,,211,,,211,211,,,211,,211,490,,490,211,490,490,,490,490',
',,490,211,490,,,,211,211,211,211,,211,211,211,211,,,,,211,211,,,,,,',
'211,,211,211,211,,,,211,211,211,33,33,33,33,33,33,,,,33,33,,,,33,,33',
'33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,33,33,33,33,33',
'33,33,33,33,33,33,33,,33,33,33,,33,33,33,33,33,484,484,484,484,484,484',
'484,,,484,484,,,,,,484,484,,33,,,33,,,33,33,,,33,,33,484,,484,33,484',
'484,,484,484,484,484,484,33,484,,,,33,33,33,33,,33,33,33,33,,,,,33,33',
',,,,,,33,,33,33,33,,,,33,33,33,749,749,749,749,749,749,,,,749,749,,',
',749,,749,749,749,749,749,749,749,,,,,,749,749,749,749,749,749,749,',
',749,,,,,,749,749,749,749,749,749,749,749,749,749,749,749,,749,749,749',
',749,749,749,749,749,483,483,483,483,483,483,483,,,483,483,,,,,,483',
'483,,749,,,749,,,749,749,,,749,,749,483,,483,749,483,483,,483,483,483',
'483,483,749,483,,,,749,749,749,749,,749,749,749,749,,,,,749,749,,,,',
',,749,,749,749,749,,,,749,749,749,753,753,753,753,753,753,,,,753,753',
',,,753,,753,753,753,753,753,753,753,,,,,,753,753,753,753,753,753,753',
',,753,,,,,,753,753,753,753,753,753,753,753,753,753,753,753,,753,753',
'753,,753,753,753,753,753,468,468,468,468,468,468,468,468,468,468,468',
',468,468,,,468,468,,753,,,753,,,753,753,,,753,,753,468,,468,753,468',
'468,,468,468,468,468,468,753,468,,,,753,753,753,753,,753,753,753,753',
',,,,753,753,,,,,,,753,,753,753,753,,,,753,753,753,971,971,971,971,971',
'971,,,,971,971,,,,971,,971,971,971,971,971,971,971,,,,,,971,971,971',
'971,971,971,971,,,971,,,,,,971,971,971,971,971,971,971,971,971,971,971',
'971,,971,971,971,,971,971,971,971,971,481,481,481,481,481,481,481,,',
'481,481,,,,,,481,481,,971,,,971,,,971,971,,,971,,971,481,,481,971,481',
'481,,481,481,481,481,481,971,481,,,,971,971,971,971,,971,971,971,971',
',,,,971,971,,,,,,,971,,971,971,971,,,,971,971,971,764,764,764,764,764',
'764,,,,764,764,,,,764,,764,764,764,764,764,764,764,,,,,,764,764,764',
'764,764,764,764,,,764,,,,,,764,764,764,764,764,764,764,764,764,764,764',
'764,,764,764,764,,764,764,764,764,764,476,,,,,,,,,,,,,,,,476,476,,764',
',,764,,,764,764,,,764,,764,476,,476,764,476,476,,476,476,,,,764,,,,',
'764,764,764,764,,764,764,764,764,,,,,764,764,,,,,,,764,,764,764,764',
',,,764,764,764,966,966,966,966,966,966,,,,966,966,,,,966,,966,966,966',
'966,966,966,966,,,,,,966,966,966,966,966,966,966,,,966,,,,,,966,966',
'966,966,966,966,966,966,966,966,966,966,,966,966,966,,966,966,966,966',
'966,478,,,,,,,,,,,,,,,,478,478,,966,,,966,,,966,966,,,966,,966,478,',
',966,478,478,,478,478,,,,966,,,,,966,966,966,966,,966,966,966,966,,',
',,966,966,,,,,,,966,,966,966,966,,,,966,966,966,586,586,586,586,586',
'586,,,,586,586,,,,586,,586,586,586,586,586,586,586,,,,,,586,586,586',
'586,586,586,586,,,586,,,,,,586,586,586,586,586,586,586,586,586,586,586',
'586,,586,586,586,,586,586,586,586,586,477,,,,,,,,,,,,,,,,477,477,,586',
',,586,,,586,586,,,586,,586,477,,477,586,477,477,,477,477,,,,586,,,,',
'586,586,586,586,,586,586,586,586,,,,,586,586,,,,,,,586,,586,586,586',
',,,586,586,586,122,122,122,,122,,,,122,122,,,,122,,122,122,122,122,122',
'122,122,,,,,,122,122,122,122,122,122,122,,,122,,,,,,,122,,,122,122,122',
'122,122,122,122,122,,122,122,122,,122,122,122,122,122,,,,,,,,,,,,,,',
',,,,,122,,,122,,,122,122,,,122,,,,,,122,,,,,,,,,122,,,,,122,122,122',
'122,,122,122,122,122,,,,,122,122,,,,,,,122,,122,122,122,,,,122,122,122',
'123,123,123,,123,,,,123,123,,,,123,,123,123,123,123,123,123,123,,,,',
',123,123,123,123,123,123,123,,,123,,,,,,,123,,,123,123,123,123,123,123',
'123,123,,123,123,123,,123,123,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123',
',,123,123,,,123,,,,,,123,,,,,,,,,123,,,,,123,123,123,123,,123,123,123',
'123,,,,,123,123,,,,,,,123,,123,123,123,,,,123,123,123,124,124,124,,124',
',,,124,124,,,,124,,124,124,124,124,124,124,124,,,,,,124,124,124,124',
'124,124,124,,,124,,,,,,,124,,,124,124,124,124,124,124,124,124,,124,124',
'124,,124,124,124,124,124,,,,,,,,,,,,,,,,,,,,124,,,124,,,124,124,,,124',
',,,,,124,,,,,,,,,124,,,,,124,124,124,124,,124,124,124,124,,,,,124,124',
',,,,,,124,,124,124,124,,,,124,124,124,125,125,125,,125,,,,125,125,,',
',125,,125,125,125,125,125,125,125,,,,,,125,125,125,125,125,125,125,',
',125,,,,,,,125,,,125,125,125,125,125,125,125,125,,125,125,125,,125,125',
'125,125,125,,,,,,,,,,,,,,,,,,,,125,,,125,,,125,125,,,125,,,,,,125,,',
',,,,,,125,,,,,125,125,125,125,,125,125,125,125,,,,,125,125,,,,,,,125',
',125,125,125,,,,125,125,125,126,126,126,126,126,,,,126,126,,,,126,,126',
'126,126,126,126,126,126,,,,,,126,126,126,126,126,126,126,,,126,,,,,',
'126,126,,126,126,126,126,126,126,126,126,126,,126,126,126,,126,126,126',
'126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126,126,,,126,,126,,,,126,,,',
',,,,,126,,,,,126,126,126,126,,126,126,126,126,,,,,126,126,,,,,,,126',
',126,126,126,,,,126,126,126,520,520,520,,520,,,,520,520,,,,520,,520',
'520,520,520,520,520,520,,,,,,520,520,520,520,520,520,520,,,520,,,,,',
',520,,,520,520,520,520,520,520,520,520,,520,520,520,,520,520,,,520,',
',,,,,,,,,,,,,,,,,,520,,,520,,,520,520,,,520,,,,,,,,,,,,,,,,,,,,520,520',
'520,520,,520,520,520,520,,,,,520,520,,,,,,,520,,520,520,520,212,212',
'212,,212,520,,,212,212,,,,212,,212,212,212,212,212,212,212,,,,,,212',
'212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212,212,212',
'212,,212,212,212,,212,212,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,',
',212,212,,,212,,212,,,,212,,,,,,,,,212,,,,,212,212,212,212,,212,212',
'212,212,,,,,212,212,,,,,,,212,,212,212,212,,,,212,212,212,213,213,213',
',213,,,,213,213,,,,213,,213,213,213,213,213,213,213,,,,,,213,213,213',
'213,213,213,213,,,213,,,,,,,213,,,213,213,213,213,213,213,213,213,,213',
'213,213,,213,213,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213',
',,213,,213,,,,213,,,,,,,,,213,,,,,213,213,213,213,,213,213,213,213,',
',,,213,213,,,,,,,213,,213,213,213,,,,213,213,213,214,214,214,,214,,',
',214,214,,,,214,,214,214,214,214,214,214,214,,,,,,214,214,214,214,214',
'214,214,,,214,,,,,,,214,,,214,214,214,214,214,214,214,214,,214,214,214',
',214,214,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,,',
',,,214,,,,,,,,,214,,,,,214,214,214,214,,214,214,214,214,,,,,214,214',
',,,,,,214,,214,214,214,,,,214,214,214,215,215,215,,215,,,,215,215,,',
',215,,215,215,215,215,215,215,215,,,,,,215,215,215,215,215,215,215,',
',215,,,,,,,215,,,215,215,215,215,215,215,215,215,,215,215,215,,215,215',
'215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,,,,,215,,',
',,,,,,215,,,,,215,215,215,215,,215,215,215,215,,,,,215,215,,,,,,,215',
',215,215,215,,,,215,215,215,216,216,216,,216,,,,216,216,,,,216,,216',
'216,216,216,216,216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,',
',216,,,216,216,216,216,216,216,216,216,,216,216,216,,216,216,216,216',
'216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,,216',
',,,,216,216,216,216,,216,216,216,216,,,,,216,216,,,,,,,216,,216,216',
'216,,,,216,216,216,217,217,217,,217,,,,217,217,,,,217,,217,217,217,217',
'217,217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,,217,,,217,217',
'217,217,217,217,217,217,217,217,217,217,,217,217,217,217,217,,,,,,,',
',,,,,,,,,,,,217,,,217,,,217,217,,,217,,217,,217,,217,,,217,,,,,,217',
',,,,217,217,217,217,,217,217,217,217,,,,,217,217,,,,,,,217,,217,217',
'217,,,,217,217,217,636,636,636,,636,,,,636,636,,,,636,,636,636,636,636',
'636,636,636,,,,,,636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636',
'636,636,636,636,636,636,,636,636,636,,636,636,636,636,636,,,,,,,,,,',
',,,,,,,,,636,,,636,,,636,636,,,636,,636,,,,636,,,,,,,,,636,,,,,636,636',
'636,636,,636,636,636,636,,,,,636,636,,,,,,,636,,636,636,636,,,,636,636',
'636,637,637,637,,637,,,,637,637,,,,637,,637,637,637,637,637,637,637',
',,,,,637,637,637,637,637,637,637,,,637,,,,,,,637,,,637,637,637,637,637',
'637,637,637,,637,637,637,,637,637,637,637,637,,,,,,,,,,,,,,,,,,,,637',
',,637,,,637,637,,,637,,,,,,637,,,,,,,,,637,,,,,637,637,637,637,,637',
'637,637,637,,,,,637,637,,,,,,,637,,637,637,637,,,,637,637,637,638,638',
'638,,638,,,,638,638,,,,638,,638,638,638,638,638,638,638,,,,,,638,638',
'638,638,638,638,638,,,638,,,,,,,638,,,638,638,638,638,638,638,638,638',
'638,638,638,638,,638,638,638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638,,',
'638,638,,,638,,638,,638,,638,,,638,,,,,,638,,,,,638,638,638,638,,638',
'638,638,638,,,,,638,638,,,,,,,638,,638,638,638,,,,638,638,638,223,223',
'223,,223,,,,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223',
'223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223',
',223,223,223,,223,223,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223',
'223,,,223,,,,,,223,,,,,,,,,223,,,,,223,223,223,223,,223,223,223,223',
',,,,223,223,,,,,,,223,,223,223,223,,,,223,223,223,224,224,224,,224,',
',,224,224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224,224',
'224,224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224,224',
',224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,',
',,,224,,,,,,,,,224,,,,,224,224,224,224,,224,224,224,224,,,,,224,224',
',,,,,,224,,224,224,224,,,,224,224,224,225,225,225,,225,,,,225,225,,',
',225,,225,225,225,225,225,225,225,,,,,,225,225,225,225,225,225,225,',
',225,,,,,,,225,,,225,225,225,225,225,225,225,225,,225,225,225,,225,225',
'225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,',
',,,,,,225,,,,,225,225,225,225,,225,225,225,225,,,,,225,225,225,,,,,',
'225,,225,225,225,,,,225,225,225,512,512,512,512,512,,,,512,512,,,,512',
',512,512,512,512,512,512,512,,,,,,512,512,512,512,512,512,512,,,512',
',,,,,512,512,512,512,512,512,512,512,512,512,512,512,,512,512,512,,512',
'512,512,512,512,,,,,,,,,,,,,,,,,,,,512,,,512,,,512,512,,,512,,512,,',
',512,,,,,,,,,512,,,,,512,512,512,512,,512,512,512,512,,,,,512,512,,',
',,,512,512,,512,512,512,,,,512,512,512,506,506,506,,506,,,,506,506,',
',,506,,506,506,506,506,506,506,506,,,,,,506,506,506,506,506,506,506',
',,506,,,,,,,506,,,506,506,506,506,506,506,506,506,,506,506,506,,506',
'506,506,506,506,,,,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,,506,,,,,,506',
',,,,,,,,506,,,,,506,506,506,506,,506,506,506,506,,,,,506,506,,,,,,,506',
',506,506,506,,,,506,506,506,504,504,504,,504,,,,504,504,,,,504,,504',
'504,504,504,504,504,504,,,,,,504,504,504,504,504,504,504,,,504,,,,,',
',504,,,504,504,504,504,504,504,504,504,504,504,504,504,,504,504,504',
'504,504,,,,,,,,,,,,,,,,,,,,504,,,504,,,504,504,,,504,,,,504,,504,,,504',
',,,,,504,,,,,504,504,504,504,,504,504,504,504,,,,,504,504,,,,,,,504',
',504,504,504,,,,504,504,504,943,943,943,,943,,,,943,943,,,,943,,943',
'943,943,943,943,943,943,,,,,,943,943,943,943,943,943,943,,,943,,,,,',
',943,,,943,943,943,943,943,943,943,943,,943,943,943,,943,943,,,943,',
',,,,,,,,,,,,,,,,,,943,,,943,,,943,943,,,943,,,,,,,,,,,,,,,,,,,,943,943',
'943,943,,943,943,943,943,,,,,943,943,,,,,,,943,,943,943,943,502,502',
'502,,502,943,,,502,502,,,,502,,502,502,502,502,502,502,502,,,,,,502',
'502,502,502,502,502,502,,,502,,,,,,,502,,,502,502,502,502,502,502,502',
'502,502,502,502,502,,502,502,502,502,502,,,,,,,,,,,,,,,,,,,,502,,,502',
',,502,502,,,502,,502,,502,,502,,,502,,,,,,502,,,,,502,502,502,502,,502',
'502,502,502,,,,,502,502,,,,,,,502,,502,502,502,,,,502,502,502,236,236',
'236,,236,,,,236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236',
'236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236',
',236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236',
'236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236,236,,236,236,236,236',
',,,,236,236,,,,,,,236,,236,236,236,,,,236,236,236,239,239,239,,239,',
',,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239',
'239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239',
',239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,',
',,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,,239,239',
',,,,,,239,,239,239,239,,,,239,239,239,240,240,240,,240,,,,240,240,,',
',240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,',
',240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240',
'240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,',
',,,,,,240,,,,,240,240,240,240,,240,240,240,240,,,,,240,240,,,,,,,240',
',240,240,240,,,,240,240,240,241,241,241,,241,,,,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,241,241',
'241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,,241',
',,,,241,241,241,241,,241,241,241,241,,,,,241,241,,,,,,,241,,241,241',
'241,,,,241,241,241,242,242,242,,242,,,,242,242,,,,242,,242,242,242,242',
'242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242',
'242,242,242,242,242,242,,242,242,242,,242,242,242,242,242,,,,,,,,,,',
',,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242',
'242,242,,242,242,242,242,,,,,242,242,,,,,,,242,,242,242,242,,,,242,242',
'242,243,243,243,,243,,,,243,243,,,,243,,243,243,243,243,243,243,243',
',,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243',
'243,243,243,,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243',
',,243,,,243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243',
'243,243,243,,,,,243,243,,,,,,,243,,243,243,243,,,,243,243,243,244,244',
'244,,244,,,,244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244',
'244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244',
',244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244',
'244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244,244,,244,244,244,244',
',,,,244,244,,,,,,,244,,244,244,244,,,,244,244,244,245,245,245,,245,',
',,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245',
'245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245',
',245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,',
',,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245,245,,,,,245,245',
',,,,,,245,,245,245,245,,,,245,245,245,246,246,246,,246,,,,246,246,,',
',246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,',
',246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246',
'246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,',
',,,,,,246,,,,,246,246,246,246,,246,246,246,246,,,,,246,246,,,,,,,246',
',246,246,246,,,,246,246,246,247,247,247,,247,,,,247,247,,,,247,,247',
'247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,',
',247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247,247,247',
'247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,,247',
',,,,247,247,247,247,,247,247,247,247,,,,,247,247,,,,,,,247,,247,247',
'247,,,,247,247,247,248,248,248,,248,,,,248,248,,,,248,,248,248,248,248',
'248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248',
'248,248,248,248,248,248,,248,248,248,,248,248,248,248,248,,,,,,,,,,',
',,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248',
'248,248,,248,248,248,248,,,,,248,248,,,,,,,248,,248,248,248,,,,248,248',
'248,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249,249,249',
',,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249',
'249,249,249,,249,249,249,,249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249',
',,249,,,249,249,,,249,,,,,,249,,,,,,,,,249,,,,,249,249,249,249,,249',
'249,249,249,,,,,249,249,,,,,,,249,,249,249,249,,,,249,249,249,250,250',
'250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250',
'250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250',
',250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250',
'250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250,250,250,250',
',,,,250,250,,,,,,,250,,250,250,250,,,,250,250,250,251,251,251,,251,',
',,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251',
'251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251',
',251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,',
',,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251',
',,,,,,251,,251,251,251,,,,251,251,251,252,252,252,,252,,,,252,252,,',
',252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,',
',252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252',
'252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,',
',,,,,,252,,,,,252,252,252,252,,252,252,252,252,,,,,252,252,,,,,,,252',
',252,252,252,,,,252,252,252,253,253,253,,253,,,,253,253,,,,253,,253',
'253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,',
',253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253,253,253',
'253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,,253',
',,,,253,253,253,253,,253,253,253,253,,,,,253,253,,,,,,,253,,253,253',
'253,,,,253,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254,254',
'254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254',
'254,254,254,254,254,254,,254,254,254,,254,254,254,254,254,,,,,,,,,,',
',,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254',
'254,254,,254,254,254,254,,,,,254,254,,,,,,,254,,254,254,254,,,,254,254',
'254,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255',
',,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255',
'255,255,255,,255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255',
',,255,,,255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255',
'255,255,255,,,,,255,255,,,,,,,255,,255,255,255,,,,255,255,255,256,256',
'256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256',
'256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256',
',256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256',
'256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256,256,,256,256,256,256',
',,,,256,256,,,,,,,256,,256,256,256,,,,256,256,256,257,257,257,,257,',
',,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257',
'257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257',
',257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,',
',,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257,257,,,,,257,257',
',,,,,,257,,257,257,257,,,,257,257,257,258,258,258,,258,,,,258,258,,',
',258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258,',
',258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,,258,258',
'258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,',
',,,,,,258,,,,,258,258,258,258,,258,258,258,258,,,,,258,258,,,,,,,258',
',258,258,258,,,,258,258,258,259,259,259,,259,,,,259,259,,,,259,,259',
'259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,',
',259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259,259,259',
'259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,,259',
',,,,259,259,259,259,,259,259,259,259,,,,,259,259,,,,,,,259,,259,259',
'259,,,,259,259,259,260,260,260,,260,,,,260,260,,,,260,,260,260,260,260',
'260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260',
'260,260,260,260,260,260,,260,260,260,,260,260,260,260,260,,,,,,,,,,',
',,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,,260,,,,,260,260',
'260,260,,260,260,260,260,,,,,260,260,,,,,,,260,,260,260,260,,,,260,260',
'260,265,265,265,,265,,,,265,265,,,,265,,265,265,265,265,265,265,265',
',,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265',
'265,265,265,,265,265,265,,265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265',
',,265,,,265,265,,,265,,,,,,265,,,,,,,,,265,,,,,265,265,265,265,,265',
'265,265,265,,,,,265,265,,,,,,,265,,265,265,265,,,,265,265,265,641,641',
'641,641,641,,,,641,641,,,,641,,641,641,641,641,641,641,641,,,,,,641',
'641,641,641,641,641,641,,,641,,,,,,641,641,,641,641,641,641,641,641',
'641,641,641,,641,641,641,,641,641,641,641,641,,,,,,,,,,,,,,,,,,,,641',
',,641,,,641,641,,,641,,641,,,,641,,,,,,,,,641,,,,,641,641,641,641,,641',
'641,641,641,,,,,641,641,,,,,,,641,,641,641,641,,,,641,641,641,272,272',
'272,,272,,,,272,272,,,,272,,272,272,272,272,272,272,272,,,,,,272,272',
'272,272,272,272,272,,,272,,,,,,,272,,,272,272,272,272,272,272,272,272',
'272,272,272,272,,272,272,272,272,272,,,,,,,,,,,,,,,,,,,,272,,,272,,',
'272,272,,,272,,272,,272,,272,,,272,,,,,,272,,,,,272,272,272,272,,272',
'272,272,272,,,,,272,272,,,,,,,272,,272,272,272,,,,272,272,272,273,273',
'273,,273,,,,273,273,,,,273,,273,273,273,273,273,273,273,,,,,,273,273',
'273,273,273,273,273,,,273,,,,,,,273,,,273,273,273,273,273,273,273,273',
'273,273,273,273,,273,273,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,',
'273,273,,,273,,273,,273,,273,,,273,,,,,,273,,,,,273,273,273,273,,273',
'273,273,273,,,,,273,273,,,,,,,273,,273,273,273,,,,273,273,273,281,281',
'281,,281,,,,281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281',
'281,281,281,281,281,,,281,,,,,,,281,,,281,281,281,281,281,281,281,281',
'281,281,281,281,,281,281,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,',
'281,281,,,281,,281,,281,,281,,,281,,,,,,281,,,,,281,281,281,281,,281',
'281,281,281,,,,,281,281,281,,,,,,281,,281,281,281,,,,281,281,281,897',
'897,897,,897,,,,897,897,,,,897,,897,897,897,897,897,897,897,,,,,,897',
'897,897,897,897,897,897,,,897,,,,,,,897,,,897,897,897,897,897,897,897',
'897,,897,897,897,,897,897,,,897,,,,,,,,,,,,,,,,,,,,897,,,897,,,897,897',
',,897,,,,,,,,,,,,,,,,,,,,897,897,897,897,,897,897,897,897,,,,,897,897',
',,,,,,897,,897,897,897,288,288,288,,288,897,,,288,288,,,,288,,288,288',
'288,288,288,288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,,,288',
',,288,288,288,288,288,288,288,288,,288,288,288,,288,288,288,288,288',
',,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,,288,,,,,,288,,,,,,,,,288,,',
',,288,288,288,288,,288,288,288,288,,,,,288,288,,,,,,,288,,288,288,288',
',,,288,288,288,290,290,290,,290,,,,290,290,,,,290,,290,290,290,290,290',
'290,290,,,,,,290,290,290,290,290,290,290,,,290,,,,,,,290,,,290,290,290',
'290,290,290,290,290,,290,290,290,,290,290,290,290,290,,,,,,,,,,,,,,',
',,,,,290,,,290,,,290,290,,,290,,,,,,290,,,,,,,,,290,,,,,290,290,290',
'290,,290,290,290,290,,,,,290,290,,,,,,,290,,290,290,290,,,,290,290,290',
'293,293,293,,293,,,,293,293,,,,293,,293,293,293,293,293,293,293,,,,',
',293,293,293,293,293,293,293,,,293,,,,,,,293,,,293,293,293,293,293,293',
'293,293,,293,293,293,,293,293,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293',
',,293,293,,,293,,,,,,293,,,,,,,,,293,,,,,293,293,293,293,,293,293,293',
'293,,,,,293,293,,,,,,,293,,293,293,293,,,,293,293,293,294,294,294,,294',
',,,294,294,,,,294,,294,294,294,294,294,294,294,,,,,,294,294,294,294',
'294,294,294,,,294,,,,,,,294,,,294,294,294,294,294,294,294,294,,294,294',
'294,,294,294,294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294,,,294,294,,,294',
',,,,,294,,,,,,,,,294,,,,,294,294,294,294,,294,294,294,294,,,,,294,294',
',,,,,,294,,294,294,294,,,,294,294,294,888,888,888,,888,,,,888,888,,',
',888,,888,888,888,888,888,888,888,,,,,,888,888,888,888,888,888,888,',
',888,,,,,,,888,,,888,888,888,888,888,888,888,888,,888,888,888,,888,888',
',,888,,,,,,,,,,,,,,,,,,,,888,,,888,,,888,888,,,888,,,,,,,,,,,,,,,,,',
',,888,888,888,888,,888,888,888,888,,,,,888,888,,,,,,,888,,888,888,888',
'299,299,299,299,299,888,,,299,299,,,,299,,299,299,299,299,299,299,299',
',,,,,299,299,299,299,299,299,299,,,299,,,,,,299,299,,299,299,299,299',
'299,299,299,299,299,,299,299,299,,299,299,299,299,299,,,,,,,,,,,,,,',
',,,,,299,,,299,,,299,299,,,299,,299,,,,299,,,,,,,,,299,,,,,299,299,299',
'299,,299,299,299,299,,,,,299,299,,,,,,,299,,299,299,299,,,,299,299,299',
'642,642,642,,642,,,,642,642,,,,642,,642,642,642,642,642,642,642,,,,',
',642,642,642,642,642,642,642,,,642,,,,,,,642,,,642,642,642,642,642,642',
'642,642,,642,642,642,,642,642,642,642,642,,,,,,,,,,,,,,,,,,,,642,,,642',
',,642,642,,,642,,,,,,642,,,,,,,,,642,,,,,642,642,642,642,,642,642,642',
'642,,,,,642,642,,,,,,,642,,642,642,642,,,,642,642,642,874,874,874,,874',
',,,874,874,,,,874,,874,874,874,874,874,874,874,,,,,,874,874,874,874',
'874,874,874,,,874,,,,,,,874,,,874,874,874,874,874,874,874,874,,874,874',
'874,,874,874,874,874,874,,,,,,,,,,,,,,,,,,,,874,,,874,,,874,874,,,874',
',,,,,874,,,,,,,,,874,,,,,874,874,874,874,,874,874,874,874,,,,,874,874',
',,,,,,874,,874,874,874,,,,874,874,874,873,873,873,,873,,,,873,873,,',
',873,,873,873,873,873,873,873,873,,,,,,873,873,873,873,873,873,873,',
',873,,,,,,,873,,,873,873,873,873,873,873,873,873,873,873,873,873,,873',
'873,873,873,873,,,,,,,,,,,,,,,,,,,,873,,,873,,,873,873,,,873,,,,873',
',873,,,873,,,,,,873,,,,,873,873,873,873,,873,873,873,873,,,,,873,873',
',,,,,,873,,873,873,873,,,,873,873,873,645,645,645,,645,,,,645,645,,',
',645,,645,645,645,645,645,645,645,,,,,,645,645,645,645,645,645,645,',
',645,,,,,,,645,,,645,645,645,645,645,645,645,645,645,645,645,645,,645',
'645,645,645,645,,,,,,,,,,,,,,,,,,,,645,,,645,,,645,645,,,645,,645,,645',
',645,,,645,,,,,,645,,,,,645,645,645,645,,645,645,645,645,,,,,645,645',
',,,,,,645,,645,645,645,,,,645,645,645,71,71,71,,71,,,,71,71,,,,71,,71',
'71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71',
'71,71,71,71,71,,71,71,71,,71,71,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71',
'71,,,71,,71,,,,,,,,,,,,,,,,,,71,71,71,71,,71,71,71,71,,,,,71,71,,,,',
',,71,,71,71,71,592,592,592,,592,71,,,592,592,,,,592,,592,592,592,592',
'592,592,592,,,,,,592,592,592,592,592,592,592,,,592,,,,,,,592,,,592,592',
'592,592,592,592,592,592,,592,592,592,,592,592,592,592,592,,,,,,,,,,',
',,,,,,,,,592,,,592,,,592,592,,,592,,592,,,,592,,,,,,,,,592,,,,,592,592',
'592,592,,592,592,592,592,,,,,592,592,,,,,,,592,,592,592,592,,,,592,592',
'592,593,593,593,,593,,,,593,593,,,,593,,593,593,593,593,593,593,593',
',,,,,593,593,593,593,593,593,593,,,593,,,,,,,593,,,593,593,593,593,593',
'593,593,593,593,593,593,593,,593,593,593,593,593,,,,,,,,,,,,,,,,,,,',
'593,,,593,,,593,593,,,593,,593,,593,,593,,,593,,,,,,593,,,,,593,593',
'593,593,,593,593,593,593,,,,,593,593,,,,,,,593,,593,593,593,,,,593,593',
'593,986,986,986,,986,,,,986,986,,,,986,,986,986,986,986,986,986,986',
',,,,,986,986,986,986,986,986,986,,,986,,,,,,,986,,,986,986,986,986,986',
'986,986,986,986,986,986,986,,986,986,986,986,986,,,,,,,,,,,,,,,,,,,',
'986,,,986,,,986,986,,,986,,986,,986,,986,,,986,,,,,,986,,,,,986,986',
'986,986,,986,986,986,986,,,,,986,986,,,,,,,986,,986,986,986,,,,986,986',
'986,571,571,571,,571,,,,571,571,,,,571,,571,571,571,571,571,571,571',
',,,,,571,571,571,571,571,571,571,,,571,,,,,,,571,,,571,571,571,571,571',
'571,571,571,,571,571,571,,571,571,571,571,571,,,,,,,,,,,,,,,,,,,,571',
',,571,,,571,571,,,571,,,,,,571,,,,,,,,,571,,,,,571,571,571,571,,571',
'571,571,571,,,,,571,571,,,,,,,571,,571,571,571,,,,571,571,571,603,603',
'603,,603,,,,603,603,,,,603,,603,603,603,603,603,603,603,,,,,,603,603',
'603,603,603,603,603,,,603,,,,,,,603,,,603,603,603,603,603,603,603,603',
'603,603,603,603,,603,603,603,603,603,,,,,,,,,,,,,,,,,,,,603,,,603,,',
'603,603,,,603,,603,,603,,603,,,603,,,,,,603,,,,,603,603,603,603,,603',
'603,603,603,,,,,603,603,,,,,,,603,,603,603,603,,,,603,603,603,20,20',
'20,,20,,,,20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20,20,20,20,20',
',,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20,20,20,20,,',
',,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20,,,,,20,20,20',
'20,,20,20,20,20,,,,,20,20,,,,,,,20,,20,20,20,,,,20,20,20,546,546,546',
',546,,,,546,546,,,,546,,546,546,546,546,546,546,546,,,,,,546,546,546',
'546,546,546,546,,,546,,,,,,,546,,,546,546,546,546,546,546,546,546,546',
'546,546,546,,546,546,546,546,546,,,,,,,,,,,,,,,,,,,,546,,,546,,,546',
'546,,,546,,,,,,546,,,546,,,,,,546,,,,,546,546,546,546,,546,546,546,546',
',,,,546,546,,,,,,,546,,546,546,546,,,,546,546,546,543,543,543,,543,',
',,543,543,,,,543,,543,543,543,543,543,543,543,,,,,,543,543,543,543,543',
'543,543,,,543,,,,,,,543,,,543,543,543,543,543,543,543,543,543,543,543',
'543,,543,543,543,543,543,,,,,,,,,,,,,,,,,,,,543,,,543,,,543,543,,,543',
',543,,,,543,,,543,,,,,,543,,,,,543,543,543,543,,543,543,543,543,,,,',
'543,543,,,,,,,543,,543,543,543,,,,543,543,543,537,537,537,,537,,,,537',
'537,,,,537,,537,537,537,537,537,537,537,,,,,,537,537,537,537,537,537',
'537,,,537,,,,,,,537,,,537,537,537,537,537,537,537,537,,537,537,537,',
'537,537,537,537,537,,,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,,537,,,',
',,537,,,,,,,,,537,,,,,537,537,537,537,,537,537,537,537,,,,,537,537,',
',,,,,537,,537,537,537,,,,537,537,537,29,29,29,,29,,,,29,29,,,,29,,29',
'29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29',
'29,29,29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29',
',,29,29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29,29,,29,29,29,29,',
',,,29,29,,,,,,,29,,29,29,29,,,,29,29,29,30,30,30,,30,,,,30,30,,,,30',
',30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30',
'30,30,30,30,30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30',
',,30,,,30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30',
'30,,,,,30,30,,,,,,,30,,30,30,30,,,,30,30,30,31,31,31,,31,,,,31,31,,',
',31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,',
'31,31,31,31,31,31,31,31,31,31,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,',
',,,31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31,31,31,,31',
'31,31,31,,,,,31,31,,,,,,,31,,31,31,31,,,,31,31,31,34,34,34,,34,,,,34',
'34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,',
'34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,,34,,,,,,,,,,,,,,,,,',
',,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34,34,34,,34,34,34,34',
',,,,34,34,,,,,,,34,,34,34,34,35,35,35,,35,34,,,35,35,,,,35,,35,35,35',
'35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35,35',
'35,35,35,,35,35,35,,35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,',
'35,,,,,,,,,,,,,,,,,,,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,35,,,35',
',35,35,35,534,534,534,,534,35,,,534,534,,,,534,,534,534,534,534,534',
'534,534,,,,,,534,534,534,534,534,534,534,,,534,,,,,,,534,,,534,534,534',
'534,534,534,534,534,,534,534,534,,534,534,534,534,534,,,,,,,,,,,,,,',
',,,,,534,,,534,,,534,534,,,534,,,,,,534,,,,,,,,,534,,,,,534,534,534',
'534,,534,534,534,534,,,,,534,534,,,,,,,534,,534,534,534,,,,534,534,534',
'531,531,531,,531,,,,531,531,,,,531,,531,531,531,531,531,531,531,,,,',
',531,531,531,531,531,531,531,,,531,,,,,,,531,,,531,531,531,531,531,531',
'531,531,,531,531,531,,531,531,531,531,531,,,,,,,,,,,,,,,,,,,,531,,,531',
',,531,531,,,531,,,,,,531,,,,,,,,,531,,,,,531,531,531,531,,531,531,531',
'531,,,,,531,531,,,,,,,531,,531,531,531,,,,531,531,531,41,41,41,,41,',
',,41,41,,,,41,,41,41,41,41,41,41,41,,,,,,41,41,41,41,41,41,41,,,41,',
',,,,,41,,,41,41,41,41,41,41,41,41,,41,41,41,,41,41,41,41,41,,,,,,,,',
',,,,,,,,,,,41,,,41,,,41,41,,,41,,,,,,41,,,,,,,,,41,,,,,41,41,41,41,',
'41,41,41,41,,,,,41,41,,,,,,,41,,41,41,41,,,,41,41,41,42,42,42,,42,,',
',42,42,,,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,',
',,,,42,,,42,42,42,42,42,42,42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,',
',,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42',
'42,42,42,,,,,42,42,,,,,,,42,,42,42,42,,,,42,42,42,528,528,528,,528,',
',,528,528,,,,528,,528,528,528,528,528,528,528,,,,,,528,528,528,528,528',
'528,528,,,528,,,,,,,528,,,528,528,528,528,528,528,528,528,,528,528,528',
',528,528,,,528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528,,,,,,,,',
',,,,,,,,,,,528,528,528,528,,528,528,528,528,,,,,528,528,,,,,,,528,,528',
'528,528,44,44,44,,44,528,,,44,44,,,,44,,44,44,44,44,44,44,44,,,,,,44',
'44,44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44',
',44,44,44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,',
',,,,44,,,,,44,44,44,44,,44,44,44,44,,,,,44,44,,,,,,,44,,44,44,44,,,',
'44,44,44,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45',
'45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45',
'45,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,',
'45,,,,,45,45,45,45,,45,45,45,45,,,,,45,45,,,,,,,45,,45,45,45,,,,45,45',
'45,47,47,47,,47,,,,47,47,,,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47',
'47,47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,47',
'47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,,47,,,',
',47,47,47,47,,47,47,47,47,,,,,47,47,,,,,,,47,,47,47,47,,,,47,47,47,522',
'522,522,,522,,,,522,522,,,,522,,522,522,522,522,522,522,522,,,,,,522',
'522,522,522,522,522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522',
'522,522,522,522,522,,522,522,522,522,522,,,,,,,,,,,,,,,,,,,,522,,,522',
',,522,522,,,522,,522,,522,,522,,,522,,,,,,522,,,,,522,522,522,522,,522',
'522,522,522,,,,,522,522,,,,,,,522,,522,522,522,,,,522,522,522,61,61',
'61,61,61,,,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61,61,61,61,61,61',
'61,,,61,,,,,,61,61,,61,61,61,61,61,61,61,61,61,,61,61,61,,61,61,61,61',
'61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,61,,,,61,,,,,,,,,61,,,,',
'61,61,61,61,,61,61,61,61,,,,,61,61,,,,,,,61,,61,61,61,,,,61,61,61,62',
'62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62',
'62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62,62,62,62',
'62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,62,,,,,,62,,',
',,62,62,62,62,,62,62,62,62,,,,,62,62,,,,,,,62,,62,62,62,,,,62,62,62',
'63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63',
'63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,63',
'63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,63,,,,,,63,',
',,,63,63,63,63,,63,63,63,63,,,,,63,63,,,,,,,63,,63,63,63,,,,63,63,63',
'634,634,634,634,634,,,,634,634,,,,634,,634,634,634,634,634,634,634,',
',,,,634,634,634,634,634,634,634,,,634,,,,,,634,634,,634,634,634,634',
'634,634,634,634,634,,634,634,634,,634,634,634,634,634,,,,,,,,,,,,,,',
',,,,,634,,,634,,,634,634,,,634,,634,,,,634,,,,,,,,,634,,,,,634,634,634',
'634,,634,634,634,634,,,,,634,634,,,,,,,634,,634,634,634,,,,634,634,634',
'66,66,66,,66,,,,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66',
'66,66,,,66,,,,,,,66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,66,66',
'66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,,66,,,,,66',
'66,66,66,,66,66,66,66,,,,,66,66,,,,,,,66,,66,66,66,,,,66,66,66,67,67',
'67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67',
',,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,67,67,67,,',
',,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,,67,,,,,67,67,67',
'67,,67,67,67,67,,,,,67,67,,,,,,,67,,67,67,67,,,,67,67,67,70,70,70,,70',
',,,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70',
',,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,70,70,70,,,,,,,',
',,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,,70,,,,,70,70,70,70',
',70,70,70,70,,,,,70,70,70,,,,,70,70,,70,70,70,,,,70,70,70,417,417,417',
',417,,,,417,417,,,,417,,417,417,417,417,417,417,417,,,,,,417,417,417',
'417,417,417,417,,,417,,,,,,,417,,,417,417,417,417,417,417,417,417,,417',
'417,417,,417,417,417,417,417,,,,,,,,,,,,,,,,,,,,417,,,417,,,417,417',
',,417,,,,,,417,,,,,,,,,417,,,,,417,417,417,417,,417,417,417,417,,,,',
'417,417,,,,,,,417,,417,417,417,,,,417,417,417,72,72,72,,72,,,,72,72',
',,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72',
',,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,72,,,,,,,,,,,,,,,,,72,',
',72,,,72,,,72,72,,,72,,,,,,,,,,,,,,,,,,,,72,72,72,72,,72,72,72,72,,',
',,72,72,,,,,,,72,,72,72,72,73,73,73,,73,72,,,73,73,,,,73,,73,73,73,73',
'73,73,73,,,,,,73,73,73,73,73,73,73,,,73,,,,,,,73,,,73,73,73,73,73,73',
'73,73,,73,73,73,,73,73,,,73,,,,,,,,,,,,,,,,,,,,73,,,73,,,73,73,,,73',
',,,,,,,,,,,,,,,,,,,73,73,73,73,,73,73,73,73,,,,,73,73,,,,,,,73,,73,73',
'73,,,,,,73,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,,,,74,74,74,74,74,74,74,74,74,74,,,,,,74,74,74,74,74',
'74,74,74,74,74,74,74,,74,,,,,,74,74,,74,74,74,74,74,74,74,,,74,74,,',
',74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74,74,74,74,74',
'74,,,74,,,,,,117,117,117,117,117,,,,117,117,,,,117,,117,117,117,117',
'117,117,117,,,,,74,117,117,117,117,117,117,117,,,117,,,,,,117,117,117',
'117,117,117,117,117,117,117,117,117,,117,117,117,,117,117,117,117,117',
',,,,,,,,,,,,,,,,,,,117,,,117,,,117,117,,,117,,117,,,,117,,,,,,,,,117',
',,,,117,117,117,117,,117,117,117,117,,,,,117,117,,,,,,117,117,,117,117',
'117,,,,117,117,117,307,307,307,,307,,,,307,307,,,,307,,307,307,307,307',
'307,307,307,,,,,,307,307,307,307,307,307,307,,,307,,,,,,,307,,,307,307',
'307,307,307,307,307,307,,307,307,307,,307,307,,,307,,,,,,,,,,,,,,,,',
',,,307,,,307,,,307,307,,,307,,,,,,,,,,,,,,,,,,,,307,307,307,307,,307',
'307,307,307,,,,,307,307,,,,307,,,307,,307,307,307,646,646,646,,646,307',
',,646,646,,,,646,,646,646,646,646,646,646,646,,,,,,646,646,646,646,646',
'646,646,,,646,,,,,,,646,,,646,646,646,646,646,646,646,646,646,646,646',
'646,,646,646,646,646,646,,,,,,,,,,,,,,,,,,,,646,,,646,,,646,646,,,646',
',,,646,,646,,,646,,,,,,646,,,,,646,646,646,646,,646,646,646,646,,,,',
'646,646,,,,,,,646,,646,646,646,,,,646,646,646,647,647,647,,647,,,,647',
'647,,,,647,,647,647,647,647,647,647,647,,,,,,647,647,647,647,647,647',
'647,,,647,,,,,,,647,,,647,647,647,647,647,647,647,647,,647,647,647,',
'647,647,647,647,647,,,,,,,,,,,,,,,,,,,,647,,,647,,,647,647,,,647,,,',
',,647,,,,,,,,,647,,,,,647,647,647,647,,647,647,647,647,,,,,647,647,',
',,,,,647,,647,647,647,,,,647,647,647,648,648,648,,648,,,,648,648,,,',
'648,,648,648,648,648,648,648,648,,,,,,648,648,648,648,648,648,648,,',
'648,,,,,,,648,,,648,648,648,648,648,648,648,648,,648,648,648,,648,648',
'648,648,648,,,,,,,,,,,,,,,,,,,,648,,,648,,,648,648,,,648,,,,,,648,,',
',,,,,,648,,,,,648,648,648,648,,648,648,648,648,,,,,648,648,,,,,,,648',
',648,648,648,,,,648,648,648,652,652,652,,652,,,,652,652,,,,652,,652',
'652,652,652,652,652,652,,,,,,652,652,652,652,652,652,652,,,652,,,,,',
',652,,,652,652,652,652,652,652,652,652,,652,652,652,,652,652,652,652',
'652,,,,,,,,,,,,,,,,,,,,652,,,652,,,652,652,,,652,,,,,,652,,,,,,,,,652',
',,,,652,652,652,652,,652,652,652,652,,,,,652,652,,,,,,,652,,652,652',
'652,,,,652,652,652,855,855,855,,855,,,,855,855,,,,855,,855,855,855,855',
'855,855,855,,,,,,855,855,855,855,855,855,855,,,855,,,,,,,855,,,855,855',
'855,855,855,855,855,855,,855,855,855,,855,855,855,855,855,,,,,,,,,,',
',,,,,,,,,855,,,855,,,855,855,,,855,,855,,,,855,,,,,,,,,855,,,,,855,855',
'855,855,,855,855,855,855,,,,,855,855,,,,,,,855,,855,855,855,,,,855,855',
'855,653,653,653,,653,,,,653,653,,,,653,,653,653,653,653,653,653,653',
',,,,,653,653,653,653,653,653,653,,,653,,,,,,,653,,,653,653,653,653,653',
'653,653,653,,653,653,653,,653,653,653,653,653,,,,,,,,,,,,,,,,,,,,653',
',,653,,,653,653,,,653,,,,,,653,,,,,,,,,653,,,,,653,653,653,653,,653',
'653,653,653,,,,,653,653,,,,,,,653,,653,653,653,,,,653,653,653,852,852',
'852,,852,,,,852,852,,,,852,,852,852,852,852,852,852,852,,,,,,852,852',
'852,852,852,852,852,,,852,,,,,,,852,,,852,852,852,852,852,852,852,852',
',852,852,852,,852,852,852,852,852,,,,,,,,,,,,,,,,,,,,852,,,852,,,852',
'852,,,852,,,,,,852,,,,,,,,,852,,,,,852,852,852,852,,852,852,852,852',
',,,,852,852,,,,,,,852,,852,852,852,,,,852,852,852,324,324,324,,324,',
',,324,324,,,,324,,324,324,324,324,324,324,324,,,,,,324,324,324,324,324',
'324,324,,,324,,,,,,,324,,,324,324,324,324,324,324,324,324,,324,324,324',
',324,324,,,324,,,,,,,,,,,,,,,,,,,,324,,,324,,,324,324,,,324,,,,,,,,',
',,,,,,,,,,,324,324,324,324,,324,324,324,324,,,,,324,324,,,,,,,324,,324',
'324,324,677,677,677,,677,324,,,677,677,,,,677,,677,677,677,677,677,677',
'677,,,,,,677,677,677,677,677,677,677,,,677,,,,,,,677,,,677,677,677,677',
'677,677,677,677,,677,677,677,,677,677,677,677,677,,,,,,,,,,,,,,,,,,',
',677,,,677,,,677,677,,,677,,,,,,677,,,,,,,,,677,,,,,677,677,677,677',
',677,677,677,677,,,,,677,677,,,,,,,677,,677,677,677,,,,677,677,677,680',
'680,680,,680,,,,680,680,,,,680,,680,680,680,680,680,680,680,,,,,,680',
'680,680,680,680,680,680,,,680,,,,,,,680,,,680,680,680,680,680,680,680',
'680,,680,680,680,,680,680,680,680,680,,,,,,,,,,,,,,,,,,,,680,,,680,',
',680,680,,,680,,,,,,680,,,,,,,,,680,,,,,680,680,680,680,,680,680,680',
'680,,,,,680,680,,,,,,,680,,680,680,680,,,,680,680,680,800,800,800,,800',
',,,800,800,,,,800,,800,800,800,800,800,800,800,,,,,,800,800,800,800',
'800,800,800,,,800,,,,,,,800,,,800,800,800,800,800,800,800,800,,800,800',
'800,,800,800,800,800,800,,,,,,,,,,,,,,,,,,,,800,,,800,,,800,800,,,800',
',,,,,800,,,,,,,,,800,,,,,800,800,800,800,,800,800,800,800,,,,,800,800',
',,,,,,800,,800,800,800,,,,800,800,800,333,333,333,,333,,,,333,333,,',
',333,,333,333,333,333,333,333,333,,,,,,333,333,333,333,333,333,333,',
',333,,,,,,,333,,,333,333,333,333,333,333,333,333,,333,333,333,,333,333',
'333,333,333,,,,,,,,,,,,,,,,,,,,333,,,333,,,333,333,,,333,,,,,,333,,',
',,,,,,333,,,,,333,333,333,333,,333,333,333,333,,,,,333,333,,,,,,,333',
',333,333,333,,,,333,333,333,335,335,335,,335,,,,335,335,,,,335,,335',
'335,335,335,335,335,335,,,,,,335,335,335,335,335,335,335,,,335,,,,,',
',335,,,335,335,335,335,335,335,335,335,,335,335,335,,335,335,335,335',
'335,,,,,,,,,,,,,,,,,,,,335,,,335,335,,335,335,,,335,,,,,,335,,,,,,,',
',335,,,,,335,335,335,335,,335,335,335,335,,,,,335,335,,,,,,,335,,335',
'335,335,,,,335,335,335,683,683,683,,683,,,,683,683,,,,683,,683,683,683',
'683,683,683,683,,,,,,683,683,683,683,683,683,683,,,683,,,,,,,683,,,683',
'683,683,683,683,683,683,683,,683,683,683,,683,683,,,683,,,,,,,,,,,,',
',,,,,,,683,,,683,,,683,683,,,683,,,,,,,,,,,,,,,,,,,,683,683,683,683',
',683,683,683,683,,,,,683,683,,,,,,,683,,683,683,683,798,798,798,,798',
'683,,,798,798,,,,798,,798,798,798,798,798,798,798,,,,,,798,798,798,798',
'798,798,798,,,798,,,,,,,798,,,798,798,798,798,798,798,798,798,,798,798',
'798,,798,798,798,798,798,,,,,,,,,,,,,,,,,,,,798,,,798,,,798,798,,,798',
',,,,,798,,,,,,,,,798,,,,,798,798,798,798,,798,798,798,798,,,,,798,798',
',,,,,,798,,798,798,798,,,,798,798,798,797,797,797,,797,,,,797,797,,',
',797,,797,797,797,797,797,797,797,,,,,,797,797,797,797,797,797,797,',
',797,,,,,,,797,,,797,797,797,797,797,797,797,797,,797,797,797,,797,797',
'797,797,797,,,,,,,,,,,,,,,,,,,,797,,,797,,,797,797,,,797,,,,,,797,,',
',,,,,,797,,,,,797,797,797,797,,797,797,797,797,,,,,797,797,,,,,,,797',
',797,797,797,,,,797,797,797,796,796,796,,796,,,,796,796,,,,796,,796',
'796,796,796,796,796,796,,,,,,796,796,796,796,796,796,796,,,796,,,,,',
',796,,,796,796,796,796,796,796,796,796,,796,796,796,,796,796,796,796',
'796,,,,,,,,,,,,,,,,,,,,796,,,796,,,796,796,,,796,,,,,,796,,,,,,,,,796',
',,,,796,796,796,796,,796,796,796,796,,,,,796,796,,,,,,,796,,796,796',
'796,,,,796,796,796,795,795,795,,795,,,,795,795,,,,795,,795,795,795,795',
'795,795,795,,,,,,795,795,795,795,795,795,795,,,795,,,,,,,795,,,795,795',
'795,795,795,795,795,795,,795,795,795,,795,795,795,795,795,,,,,,,,,,',
',,,,,,,,,795,,,795,,,795,795,,,795,,,,,,795,,,,,,,,,795,,,,,795,795',
'795,795,,795,795,795,795,,,,,795,795,,,,,,,795,,795,795,795,,,,795,795',
'795,782,782,782,,782,,,,782,782,,,,782,,782,782,782,782,782,782,782',
',,,,,782,782,782,782,782,782,782,,,782,,,,,,,782,,,782,782,782,782,782',
'782,782,782,,782,782,782,,782,782,782,782,782,,,,,,,,,,,,,,,,,,,,782',
',,782,,,782,782,,,782,,,,,,782,,,,,,,,,782,,,,,782,782,782,782,,782',
'782,782,782,,,,,782,782,,,,,,,782,,782,782,782,,,,782,782,782,352,352',
'352,,352,,,,352,352,,,,352,,352,352,352,352,352,352,352,,,,,,352,352',
'352,352,352,352,352,,,352,,,,,,,352,,,352,352,352,352,352,352,352,352',
',352,352,352,,352,352,352,352,352,,,,,,,,,,,,,,,,,,,,352,,,352,,,352',
'352,,,352,,,,,,352,,,,,,,,,352,,,,,352,352,352,352,,352,352,352,352',
',,,,352,352,,,,,,,352,,352,352,352,,,,352,352,352,774,774,774,,774,',
',,774,774,,,,774,,774,774,774,774,774,774,774,,,,,,774,774,774,774,774',
'774,774,,,774,,,,,,,774,,,774,774,774,774,774,774,774,774,,774,774,774',
',774,774,774,774,774,,,,,,,,,,,,,,,,,,,,774,,,774,,,774,774,,,774,,',
',,,774,,,,,,,,,774,,,,,774,774,774,774,,774,774,774,774,,,,,774,774',
',,,,,,774,,774,774,774,,,,774,774,774,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5',
'5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5',
'5,5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5',
'5,5,,5,5,5,5,,,,,5,5,,,,,,,5,,5,5,5,,,,5,5,5,694,694,694,,694,,,,694',
'694,,,,694,,694,694,694,694,694,694,694,,,,,,694,694,694,694,694,694',
'694,,,694,,,,,,,694,,,694,694,694,694,694,694,694,694,,694,694,694,',
'694,694,,,694,,,,,,,,,,,,,,,,,,,,694,,,694,,,694,694,,,694,,,,,,,,,',
',,,,,,,,,,694,694,694,694,,694,694,694,694,,,,,694,694,,,,,,,694,,694',
'694,694,467,467,467,,467,694,,,467,467,,,,467,,467,467,467,467,467,467',
'467,,,,,,467,467,467,467,467,467,467,,,467,,,,,,,467,,,467,467,467,467',
'467,467,467,467,,467,467,467,,467,467,467,467,467,,,,,,,,,,,,,,,,,,',
',467,,,467,,,467,467,,,467,,,,,,467,,,,,,,,,467,,,,,467,467,467,467',
',467,467,467,467,,,,,467,467,,,,,,,467,,467,467,467,,,,467,467,467,750',
'750,750,,750,,,,750,750,,,,750,,750,750,750,750,750,750,750,,,,,,750',
'750,750,750,750,750,750,,,750,,,,,,,750,,,750,750,750,750,750,750,750',
'750,,750,750,750,,750,750,750,750,750,,,,,,,,,,,,,,,,,,,,750,,,750,',
',750,750,,,750,,,,,,750,,,,,,,,,750,,,,,750,750,750,750,,750,750,750',
'750,,,,,750,750,,,,,,,750,,750,750,750,,,,750,750,750,373,373,373,,373',
',,,373,373,,,,373,,373,373,373,373,373,373,373,,,,,,373,373,373,373',
'373,373,373,,,373,,,,,,,373,,,373,373,373,373,373,373,373,373,,373,373',
'373,,373,373,373,373,373,,,,,,,,,,,,,,,,,,,,373,,,373,,,373,373,,,373',
',,,,,373,,,,,,,,,373,,,,,373,373,373,373,,373,373,373,373,,,,,373,373',
',,,,,,373,,373,373,373,,,,373,373,373,466,466,466,,466,,,,466,466,,',
',466,,466,466,466,466,466,466,466,,,,,,466,466,466,466,466,466,466,',
',466,,,,,,,466,,,466,466,466,466,466,466,466,466,,466,466,466,,466,466',
'466,466,466,,,,,,,,,,,,,,,,,,,,466,,,466,,,466,466,,,466,,,,,,466,,',
',,,,,,466,,,,,466,466,466,466,,466,466,466,466,,,,,466,466,,,,,,,466',
',466,466,466,,,,466,466,466,465,465,465,,465,,,,465,465,,,,465,,465',
'465,465,465,465,465,465,,,,,,465,465,465,465,465,465,465,,,465,,,,,',
',465,,,465,465,465,465,465,465,465,465,,465,465,465,,465,465,465,465',
'465,,,,,,,,,,,,,,,,,,,,465,,,465,,,465,465,,,465,,,,,,465,,,,,,,,,465',
',,,,465,465,465,465,,465,465,465,465,,,,,465,465,,,,,,,465,,465,465',
'465,,,,465,465,465,463,463,463,,463,,,,463,463,,,,463,,463,463,463,463',
'463,463,463,,,,,,463,463,463,463,463,463,463,,,463,,,,,,,463,,,463,463',
'463,463,463,463,463,463,463,463,463,463,,463,463,463,463,463,,,,,,,',
',,,,,,,,,,,,463,,,463,,,463,463,,,463,,463,,463,,463,,,463,,,,,,463',
',,,,463,463,463,463,,463,463,463,463,,,,,463,463,,,,,,,463,,463,463',
'463,,,,463,463,463,699,699,699,,699,,,,699,699,,,,699,,699,699,699,699',
'699,699,699,,,,,,699,699,699,699,699,699,699,,,699,,,,,,,699,,,699,699',
'699,699,699,699,699,699,,699,699,699,,699,699,699,699,699,,,,,,,,,,',
',,,,,,,,,699,,,699,,,699,699,,,699,,699,,,,699,,,,,,,,,699,,,,,699,699',
'699,699,,699,699,699,699,,,,,699,699,,,,,,,699,,699,699,699,,,,699,699',
'699,716,716,716,,716,,,,716,716,,,,716,,716,716,716,716,716,716,716',
',,,,,716,716,716,716,716,716,716,,,716,,,,,,,716,,,716,716,716,716,716',
'716,716,716,,716,716,716,,716,716,716,716,716,,,,,,,,,,,,,,,,,,,,716',
',,716,,,716,716,,,716,,,,,,716,,,,,,,,,716,,,,,716,716,716,716,,716',
'716,716,716,,,,,716,716,,,,,,,716,,716,716,716,,,,716,716,716,389,389',
'389,,389,,,,389,389,,,,389,,389,389,389,389,389,389,389,,,,,,389,389',
'389,389,389,389,389,,,389,,,,,,,389,,,389,389,389,389,389,389,389,389',
',389,389,389,,389,389,389,389,389,,,,,,,,,,,,,,,,,,,,389,,,389,,,389',
'389,,906,389,906,906,906,906,906,389,,,,,,,,906,389,,,,,389,389,389',
'389,,389,389,389,389,,,,,389,389,,906,,,,,389,,389,389,389,451,906,906',
'389,389,389,906,451,451,451,,,451,451,451,,451,,,,,,,,,451,451,451,451',
',,,,,,,451,451,,451,451,451,451,451,,,,,,,,,,,,,,,,,,,,,,,451,451,451',
'451,451,451,451,451,451,451,451,451,451,451,,,451,451,451,,,451,,,451',
',,451,451,,451,,451,,451,,451,451,,451,451,451,451,451,,451,451,451',
',,,,,714,,714,714,714,714,714,,451,,,451,451,451,451,714,451,,451,450',
',,,451,451,,450,450,450,,,450,450,450,,450,,714,,,,,,,450,450,450,450',
'714,714,,,,714,,450,450,,450,450,450,450,450,,,,,,,,,,,,,,,,,,,,,,,450',
'450,450,450,450,450,450,450,450,450,450,450,450,450,,,450,450,450,,',
'450,,,450,,,450,450,,450,,450,,450,,450,450,,450,450,450,450,450,,450',
'450,450,,,,,,908,,908,908,908,908,908,,450,,,450,450,450,450,908,450',
',450,27,,,,450,450,,27,27,27,,,27,27,27,,27,,908,,,,,,,27,27,27,,908',
'908,,,,908,,27,27,,27,27,27,27,27,,,,,,,,,,,,,,,,,,,,,,,27,27,27,27',
'27,27,27,27,27,27,27,27,27,27,,,27,27,27,,,27,,27,27,,,27,27,,27,,27',
',27,,27,27,,27,27,27,27,27,,27,27,27,348,,348,348,348,348,348,,,,,,',
'27,,348,27,27,441,27,,27,,,,441,441,441,27,27,441,441,441,,441,,,348',
'348,,,,,441,441,441,348,348,348,348,,,,348,441,441,,441,441,441,441',
'441,,,,,,,,,,,,,,,,,,,,,,,441,441,441,441,441,441,441,441,441,441,441',
'441,441,441,,,441,441,441,,,441,,441,441,,,441,441,,441,,441,,441,,441',
'441,,441,441,441,441,441,59,441,441,441,,,,59,59,59,,,59,59,59,,59,441',
',,441,441,,441,,441,59,59,59,,,,441,441,,,59,59,,59,59,59,59,59,,,,',
',,,,,,,,,,,,,,,,,,59,59,59,59,59,59,59,59,59,59,59,59,59,59,,,59,59',
'59,,,59,,,59,,,59,59,,59,,59,,59,,59,59,,59,59,59,59,59,,59,28,59,,',
',,,28,28,28,,,28,28,28,59,28,,59,59,59,59,,59,,59,28,28,,,59,59,,,,',
'28,28,,28,28,28,28,28,,,,,,,,,,,,,,,,,,,,,,,28,28,28,28,28,28,28,28',
'28,28,28,28,28,28,,,28,28,28,,,28,,28,28,,,28,28,,28,,28,,28,,28,28',
',28,28,28,28,28,,28,492,28,,,,,,492,492,492,,,492,492,492,28,492,,28',
'28,,28,,28,,492,492,,,,28,28,,,,,492,492,,492,492,492,492,492,,,,,,',
',268,268,,,268,,,,,,,,268,268,,268,268,268,268,268,268,268,,,268,268',
'492,,,268,268,268,268,492,,,,,492,492,,,,,,,268,268,,268,268,268,268',
'268,268,268,268,268,268,268,268,492,492,268,,,,,,,,,,,,,492,,,492,,',
',,492,,,,,,,492,632,632,632,632,632,632,632,632,632,632,632,632,632',
'632,632,632,632,632,632,632,632,632,632,632,,,,632,632,632,632,632,632',
'632,632,632,632,,,,,,632,632,632,632,632,632,632,632,632,,,632,,,,,',
',,632,632,,632,632,632,632,632,632,632,,,632,632,,,,632,632,632,632',
',,,,,,,,,,,,,632,632,,632,632,632,632,632,632,632,632,632,632,632,632',
',,632,632,,,,,,,,,,,,,,632,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9',
'9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,',
'9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9',
'9,9,,,9,9,,,,,,,,,,,,,,9,408,408,408,408,408,408,408,408,408,408,408',
'408,408,408,408,408,408,408,408,408,408,408,408,408,,,,408,408,408,408',
'408,408,408,408,408,408,,,,,,408,408,408,408,408,408,408,408,408,,,408',
',,,,,,,408,408,,408,408,408,408,408,408,408,,,408,408,,,,408,408,408',
'408,,,,,,,,,,,,,,408,408,,408,408,408,408,408,408,408,408,408,408,408',
'408,,,408,408,,,,,,,,,,,,,,408,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
'8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,',
'8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8',
'8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,756,756,756,756,756,756,756,756,756,756',
'756,756,756,756,756,756,756,756,756,756,756,756,756,756,,,,756,756,756',
'756,756,756,756,756,756,756,,,,,,756,756,756,756,756,756,756,756,756',
',,756,,,,,,,,756,756,,756,756,756,756,756,756,756,,,756,756,,,,756,756',
'756,756,,,,,,,,,,,,,,756,756,,756,756,756,756,756,756,756,756,756,756',
'756,756,219,219,756,,219,,,,,,,,219,219,,219,219,219,219,219,219,219',
',,219,219,,,,219,219,219,219,,,,,,219,,,,,,,,219,219,,219,219,219,219',
'219,219,219,219,219,219,219,219,640,640,219,,640,,,,,,,,640,640,,640',
'640,640,640,640,640,640,,,640,640,,,,640,640,640,640,,,,,,640,,,,,,',
',640,640,,640,640,640,640,640,640,640,640,640,640,640,640,595,595,640',
',595,,,,,,,,595,595,,595,595,595,595,595,595,595,,,595,595,,,,595,595',
'595,595,,,,,,595,,,,,,,,595,595,,595,595,595,595,595,595,595,595,595',
'595,595,595,462,462,595,,462,,,,,,,,462,462,,462,462,462,462,462,462',
'462,,,462,462,,,,462,462,462,462,,,,,,462,,,,,,,,462,462,,462,462,462',
'462,462,462,462,462,462,462,462,462,461,461,462,,461,,,,,,,,461,461',
',461,461,461,461,461,461,461,,,461,461,,,,461,461,461,461,,,,,,461,',
',,,,,,461,461,,461,461,461,461,461,461,461,461,461,461,461,461,988,988',
'461,,988,,,,,,,,988,988,,988,988,988,988,988,988,988,,,988,988,,,,988',
'988,988,988,,,,,,988,,,,,,,,988,988,,988,988,988,988,988,988,988,988',
'988,988,988,988,983,983,988,,983,,,,,,,,983,983,,983,983,983,983,983',
'983,983,,,983,983,,,,983,983,983,983,,,,,,983,,,,,,,,983,983,,983,983',
'983,983,983,983,983,983,983,983,983,983,220,220,983,,220,,,,,,,,220',
'220,,220,220,220,220,220,220,220,,,220,220,,,,220,220,220,220,,,,,,',
',,,,,,,220,220,,220,220,220,220,220,220,220,220,220,220,220,220,602',
'602,220,,602,,,,,,,,602,602,,602,602,602,602,602,602,602,,,602,602,',
',,602,602,602,602,,,,,,602,,,,,,,,602,602,,602,602,602,602,602,602,602',
'602,602,602,602,602,601,601,602,,601,,,,,,,,601,601,,601,601,601,601',
'601,601,601,,,601,601,,,,601,601,601,601,,,,,,601,,,,,,,,601,601,,601',
'601,601,601,601,601,601,601,601,601,601,601,987,987,601,,987,,,,,,,',
'987,987,,987,987,987,987,987,987,987,,,987,987,,,,987,987,987,987,,',
',,,987,,,,,,,,987,987,,987,987,987,987,987,987,987,987,987,987,987,987',
'532,532,987,,532,,,,,,,,532,532,,532,532,532,532,532,532,532,,,532,532',
',,,532,532,532,532,,,,,,532,,,,,,,,532,532,,532,532,532,532,532,532',
'532,532,532,532,532,532,533,533,532,,533,,,,,,,,533,533,,533,533,533',
'533,533,533,533,,,533,533,,,,533,533,533,533,,,,,,533,,,,,,,,533,533',
',533,533,533,533,533,533,533,533,533,533,533,533,594,594,533,,594,,',
',,,,,594,594,,594,594,594,594,594,594,594,,,594,594,,,,594,594,594,594',
',,,,,594,,,,,,,,594,594,,594,594,594,594,594,594,594,594,594,594,594',
'594,523,523,594,,523,,,,,,,,523,523,,523,523,523,523,523,523,523,,,523',
'523,,,,523,523,523,523,,,,,,523,,,,,,,,523,523,,523,523,523,523,523',
'523,523,523,523,523,523,523,524,524,523,,524,,,,,,,,524,524,,524,524',
'524,524,524,524,524,,,524,524,,,,524,524,524,524,,,,,,524,,,,,,,,524',
'524,,524,524,524,524,524,524,524,524,524,524,524,524,639,639,524,,639',
',,,,,,,639,639,,639,639,639,639,639,639,639,,,639,639,,,,639,639,639',
'639,,,,,,639,,,,,,,,639,639,,639,639,639,639,639,639,639,639,639,639',
'639,639,218,218,639,,218,,,,,,,,218,218,,218,218,218,218,218,218,218',
',,218,218,,,,218,218,218,218,,,,,,218,,,,,,,,218,218,,218,218,218,218',
'218,218,218,218,218,218,218,218,,551,218,551,551,551,551,551,,710,,710',
'710,710,710,710,551,,,,,,,,710,,712,,712,712,712,712,712,,,,,,551,,',
'712,,,,,710,551,551,551,551,,,,551,710,710,710,710,,,,710,712,,754,',
'754,754,754,754,754,712,712,712,712,,,,712,754,,755,,755,755,755,755',
'755,,904,,904,904,904,904,904,755,,,,,754,,,904,,,,,,754,754,754,754',
',,,754,755,,,,,,,,904,755,755,755,755,,,,755,904,904,904,904,,,910,904',
'910,910,910,910,910,,935,,935,935,935,935,935,910,,,,,,,,935,,937,,937',
'937,937,937,937,,,,,,910,,,937,,,,,935,,,910,910,,,,910,935,935,935',
'935,,,,935,937,,939,,939,939,939,939,939,937,937,937,937,,,,937,939',
',994,,994,994,994,994,994,,1003,,1003,1003,1003,1003,1003,994,,,,,939',
',,1003,,,,,,,,939,939,,,,939,994,,,,,,,,1003,,,994,994,,,,994,1003,1003',
'1003,1003,,,1005,1003,1005,1005,1005,1005,1005,1007,,1007,1007,1007',
'1007,1007,1009,1005,1009,1009,1009,1009,1009,1030,1007,1030,1030,1030',
'1030,1030,,1009,,,,,,,1030,1005,,,,,,,1007,,,,1005,1005,,1009,,1005',
',1007,1007,,1030,,1007,,1009,1009,,,,1009,,1030,1030,,,,1030' ]
        racc_action_check = arr = ::Array.new(26933, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1727,  1121,   nil,   100,   nil, 22385,  1566,   656, 25237, 24981,
   648,   nil,   753,   749,   526,   809,  1301,   506,   nil,   -71,
 14914,  2311,   862,   nil,   651,   nil,   280, 24246, 24600, 15494,
 15639, 15784,   nil,  4063, 15929, 16068,   nil,   741,   453,   400,
   813, 16497, 16642,   285, 16926, 17071,   641, 17216,   694,   527,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 24488,
   nil, 17506, 17651, 17796,   -23,   nil, 18086, 18231,   nil,   nil,
 18376, 14050, 18666, 18805, 18950,   nil,   nil,   nil,   nil,   nil,
   646,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   589,   nil,   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   819,   nil, 19068,   nil,   nil,
   nil,   nil,  5084,  5229,  5374,  5519,  5664,   nil,  3187,   nil,
   193,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   682,
   nil,  3917,  5948,  6093,  6238,  6383,  6528,  6673, 26463, 25426,
 25853,   nil,   nil,  7253,  7398,  7543,   nil,   nil,  1418,   424,
   426,   739,   -52,   632,   677,   nil,  8407,  2311,   670,  8552,
  8697,  8842,  8987,  9132,  9277,  9422,  9567,  9712,  9857, 10002,
 10147, 10292, 10437, 10582, 10727, 10872, 11017, 11162, 11307, 11452,
 11597,   nil,   nil,   nil,   nil, 11742,   nil,   nil, 24712,   nil,
   nil,   662, 12032, 12177,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 12322,   nil,  2019,   nil,   623,   621,   nil, 12606,   666,
 12751,   nil,   nil, 12896, 13041,   nil,   nil,   148,   nil, 13325,
  1128,   593,   543,  3479,   554,   591,   489, 19213,  1873,   741,
   774,   997,   544,  1221,   nil,   499,   452,   279,   nil,   nil,
   nil,   483,   397,   257, 20367,   nil,   307,  1278,  3187,  3479,
   296,   nil,   262, 20941,   nil, 21086,  2895,  1420,   189,   nil,
   488,   -68,   194,   167,   120,   189,   nil,   nil, 24309,    -4,
    34,    35, 22095,  2019,   997,   266,   246,    91,   -19,    40,
  1143,   156,    67,    75,   nil,   nil,   339,   481,   -45,   nil,
   879,   nil,   -86, 22959,   nil,   nil,   nil,   641,   633,   279,
   609,   567,   559,   535,   510,   500,   nil,   468,   nil, 23829,
   nil,   442,   263,   375,   509,   132,   -45,   -41,   483,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1069, 25109,   nil,
   nil,   nil,   nil,  1066,   nil,  1116,  1024, 18521,  1023,   nil,
   nil,  1008,   nil,  1426,   345,  1109,   nil,   nil,   997,   nil,
   nil,   nil,   nil,   nil,  1143,  1021,   nil,  1005,   991,   594,
   541, 24378,   nil,   nil,   nil,   336,   862,  1022,   nil,   nil,
 24108, 23970,   nil,   nil,   nil,   nil,   nil,   nil,   -33,   nil,
  1020, 25670, 25609, 23394,   417, 23249, 23104, 22669,  4355,  2749,
   406,   684,  1021,  1020,  1012,  1011,  4647,  4939,  4793,  3625,
  3771,  4501,  2603,  4209,  4063,   881,  1441,  2895,  3333,  1727,
  3917,   nil, 24712,   nil,   nil,   883,   nil,   nil,   nil,   881,
   nil,   nil,  8262,   nil,  7978,   nil,  7833,   nil,   370,   nil,
   nil,   nil,  7688,   813,   nil,   880,   873,   nil,   nil,   863,
  5809,   861, 17361, 26280, 26341,   668,   901,   nil, 16787,   849,
   nil, 16352, 26097, 26158, 16207,  3041,  2165, 15349,   973,   969,
   836,   869,   nil, 15204,   nil,   nil, 15059,   nil,   nil,   nil,
   nil, 26525,   nil,   825,   824,   nil,   821,   820,   818,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   803,  2472,   nil,
   nil, 14624,   nil,   nil,   nil,   898,   nil,   nil,   nil,   891,
   nil,   nil,   870,  1581,   908,   nil,  4939,   149,   913,   915,
   909,   917, 14189, 14334, 26219, 25548,   205,   nil,   nil,  1447,
   nil, 25975, 25914, 14769,   nil,   nil,   235,  1435,   872,   nil,
    -7,   nil,   nil,   nil,    -1,   nil,   nil,   nil,   862,   nil,
   nil,   373,   nil,   261,   nil,   nil,   851,   nil,   854,   nil,
   nil,   nil, 24853,   nil, 17941,   861,  6818,  6963,  7108, 26402,
 25487, 11887, 13470,   201,   929, 13905, 19352, 19497, 19642,   928,
   nil,   nil, 19787, 20077,   929,   nil,   nil,   nil,   123,   142,
   448,   112,   903,   902,  1027,   nil,  1010,    24,   nil,   nil,
   925,   -49,  1030,   nil,   920,   nil,   970, 20506,   nil,   nil,
 20651,   nil,  -116, 21231,   950,   nil,   954,   251,    27,  1002,
   250,  1272,  1004,   963, 22530,   nil,  1035,   -14,  1095, 23539,
   nil,   nil,   nil,   347,   175,   986,   691,   nil,   nil,   261,
 26533,   nil, 26550,   nil, 24038,   nil, 23684,   nil,  2443,   nil,
   994,   996,  1567,  1001,   nil,   nil,   nil,   nil,   635,   nil,
  1118,   nil,   nil,   nil,   nil,   nil,  1125,   nil,   185,  1020,
   152,    68,   192,   180,  3625,   622,  1424,   nil,  1050,  4209,
 22814,   nil,    41,  4355, 26589, 26606, 25365,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  4647,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    80, 22240,   104,   382,   366,   224,   730,
   nil,  1581, 21950,   nil,   153,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil, 21805, 21660, 21515, 21370,   162,
 20796,   nil,   -54,   nil,   nil,   229,   nil,   nil,   793,   nil,
  2749,   nil,   nil,   nil,   nil,   241,    11,   nil,   nil,   374,
   nil,  3771,   267,   330,   nil,   nil,   nil,   nil,   nil,   nil,
   292,   347,   313,   nil,   nil,   nil,   332,   337,   nil,   360,
   372,   nil,   395,   nil,   nil,   410,  1421,  1338,   nil,   nil,
   540,   nil, 20222,   567,   nil, 19932,  1143,   -23,   597,   nil,
   605,   264,  2165,   nil,   628,   516,   223,   nil,   523,   545,
    60,   nil,   nil, 13760, 13615,  1873,  3041,   nil,   574,   575,
   nil,   581,   590,   596,   nil,   624,   610,   595, 13186,   nil,
   nil,   nil,   nil,  2457,   nil,   nil,   181, 12467,   nil,  1289,
  2603,  1713,   nil,   nil, 26614,   nil, 23872,   nil, 24176,   nil,
 26666,   nil,   nil,   nil,   nil,   643,   644,   nil,    36,   nil,
   nil,    47,   nil,   nil,   nil,   771,   nil,   nil,   nil,   692,
   nil,   nil,   722,   nil,   nil, 26674,   nil, 26691,   nil, 26730,
   nil,   nil,   683,  8123,   834,   762,   nil,  3333,    92,   138,
  1289,   772,    -1,   nil,   716,   822,   320,   nil,   nil,   nil,
   707,   712,   731,   733,  2482,   855,  4793,   nil,   nil,   nil,
   nil,  4501,   746,   nil,   nil,   747,   749,   752,   753,   nil,
   755,   nil,   561, 25792,   nil,   887, 14479, 26036, 25731,    42,
   nil,   nil,   nil,  1275, 26747,   nil,   nil,   nil,   nil,   780,
   627,   905,   nil, 26755,   nil, 26807,   nil, 26814,   nil, 26821,
   nil,   nil,  1034,    -9,   nil,   -42,   106,   147,    26,    33,
   nil,   652,   nil,   nil,   656,   774,   782,   786,    32,   nil,
 26828,   nil,   nil,   nil,   nil,   989,   nil ]

racc_action_default = [
    -3,  -610,    -1,  -596,    -4,  -610,    -7,  -610,  -610,  -610,
  -610,   -30,  -610,  -610,   -35,  -610,  -610,  -290,   -47,  -598,
  -610,   -52,   -56,   -57,   -58,   -62,  -267,  -267,  -267,  -303,
  -332,  -333,   -74,   -12,   -78,   -86,   -88,  -610,  -500,  -501,
  -610,  -610,  -610,  -610,  -610,  -610,  -226,  -610,  -598,  -240,
  -281,  -282,  -283,  -284,  -285,  -286,  -287,  -288,  -289,  -584,
  -292,  -296,  -609,  -574,  -311,  -393,  -610,  -610,   -54,   -54,
  -596,  -610,  -610,  -610,  -610,  -334,  -335,  -338,  -438,  -439,
  -440,  -441,  -462,  -444,  -445,  -464,  -466,  -449,  -454,  -458,
  -460,  -477,  -478,  -479,  -462,  -481,  -483,  -484,  -485,  -486,
  -582,  -488,  -489,  -583,  -491,  -492,  -493,  -494,  -495,  -496,
  -497,  -498,  -499,  -504,  -505,  -610,    -2,  -597,  -605,  -606,
  -607,    -6,  -610,  -610,  -610,  -610,  -610,    -8,    -3,   -18,
  -610,  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -127,  -128,
  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,
  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,
  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,
  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,
  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,
  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,
  -189,  -190,  -191,  -192,  -193,  -194,  -195,  -196,  -197,   -23,
  -124,   -12,  -610,  -610,  -610,  -610,  -610,  -257,  -610,  -610,
  -610,  -594,  -595,  -610,  -610,  -598,  -599,   -51,  -610,  -500,
  -501,  -610,  -290,  -610,  -610,  -232,  -610,   -12,  -610,  -209,
  -210,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
  -610,  -241,  -242,  -243,  -244,  -610,  -402,  -404,  -610,  -592,
  -593,   -63,  -257,  -610,  -310,  -408,  -417,  -419,   -69,  -414,
   -70,  -598,   -71,  -247,  -262,  -271,  -271,  -266,  -610,  -272,
  -610,  -462,  -576,  -610,  -610,   -72,   -73,  -596,   -13,  -610,
   -16,  -610,   -76,   -12,  -598,  -610,   -79,   -82,   -12,   -94,
   -95,  -610,  -610,  -102,  -303,  -306,  -598,  -610,  -332,  -333,
  -337,  -415,  -610,   -84,  -610,   -90,  -300,  -610,  -211,  -212,
  -482,  -220,  -221,  -610,  -233,  -610,   -12,  -294,  -598,  -248,
  -602,  -602,  -610,  -610,  -602,  -610,  -312,  -313,  -532,   -53,
  -610,  -610,  -610,   -12,   -12,  -596,  -610,  -597,  -500,  -501,
  -610,  -610,  -290,  -610,  -348,  -349,  -112,  -113,  -610,  -115,
  -610,  -290,  -508,  -610,  -500,  -501,  -325,  -117,  -118,  -157,
  -158,  -159,  -175,  -180,  -187,  -190,  -327,  -610,  -572,  -610,
  -442,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  1037,
    -5,  -608,   -24,   -25,   -26,   -27,   -28,  -610,  -610,   -20,
   -21,   -22,  -125,  -610,   -31,   -34,  -277,  -610,  -610,  -276,
   -32,  -610,   -36,  -610,  -290,   -44,   -46,  -198,  -252,  -272,
   -48,   -49,   -37,  -199,  -252,  -598,  -258,  -271,  -271,  -585,
  -586,  -267,  -412,  -587,  -588,  -586,  -585,  -267,  -411,  -413,
  -587,  -588,  -336,  -585,  -586,   -43,  -206,   -50,  -598,  -309,
  -610,  -610,  -610,  -257,  -300,  -610,  -610,  -610,  -207,  -208,
  -213,  -214,  -215,  -216,  -217,  -218,  -222,  -223,  -224,  -225,
  -227,  -228,  -229,  -230,  -231,  -234,  -235,  -236,  -237,  -598,
  -245,  -423,  -267,   -60,   -64,  -598,  -268,  -421,  -423,  -598,
  -305,  -263,  -610,  -264,  -610,  -269,  -610,  -273,  -610,  -579,
  -581,   -11,  -597,   -15,   -17,  -598,   -75,  -298,   -91,   -80,
  -610,  -598,  -257,  -610,  -610,  -101,  -610,  -482,  -610,   -87,
   -92,  -610,  -610,  -610,  -610,  -246,  -238,  -610,  -430,  -610,
  -598,  -610,  -249,  -604,  -603,  -251,  -604,  -301,  -302,  -575,
  -394,  -532,  -397,  -571,  -571,  -515,  -517,  -517,  -517,  -531,
  -533,  -534,  -535,  -536,  -537,  -538,  -539,  -540,  -610,  -542,
  -544,  -546,  -551,  -553,  -554,  -556,  -561,  -563,  -564,  -566,
  -567,  -568,  -610,   -12,  -339,  -340,   -12,  -610,  -610,  -610,
  -610,  -610,  -610,  -257,  -610,  -610,  -300,   -54,  -112,  -113,
  -114,  -610,  -610,  -257,  -321,  -506,  -610,   -12,  -510,  -329,
  -598,  -443,  -463,  -468,  -610,  -470,  -446,  -465,  -610,  -467,
  -448,  -610,  -451,  -610,  -453,  -456,  -610,  -457,  -610,  -480,
    -9,   -19,  -610,   -29,  -610,  -280,  -610,  -610,  -257,  -610,
  -610,  -610,  -610,  -416,  -610,  -259,  -261,  -610,  -610,   -65,
  -256,  -409,  -610,  -610,   -67,  -410,  -308,  -600,  -585,  -586,
  -585,  -586,  -598,  -610,  -610,  -424,   -59,  -405,  -421,  -254,
  -610,  -382,  -610,  -304,  -271,  -270,  -274,  -610,  -577,  -578,
  -610,   -14,   -77,  -610,   -83,   -89,  -598,  -585,  -586,  -255,
  -589,  -100,  -610,   -85,  -610,  -205,  -219,  -598,  -609,  -609,
  -293,  -295,  -297,  -602,  -610,  -598,  -610,  -513,  -514,  -610,
  -610,  -524,  -610,  -527,  -610,  -529,  -610,  -350,  -610,  -352,
  -354,  -357,  -360,  -598,  -545,  -555,  -565,  -569,  -609,  -341,
  -609,   -55,  -342,  -343,  -316,  -317,  -610,  -319,  -610,  -598,
  -585,  -586,  -589,  -299,   -12,  -112,  -113,  -116,  -598,   -12,
  -610,  -323,  -610,   -12,  -532,  -532,  -610,  -573,  -469,  -472,
  -473,  -474,  -475,  -476,   -12,  -447,  -450,  -452,  -455,  -459,
  -461,  -126,   -33,  -278,  -610,  -598,  -585,  -586,  -586,  -585,
   -45,  -253,  -610,  -601,  -271,   -39,  -201,   -40,  -202,   -66,
   -41,  -204,   -42,  -203,   -68,  -610,  -610,  -610,  -610,  -416,
  -610,  -403,  -382,  -407,  -406,  -610,  -418,  -383,  -598,  -385,
   -12,  -420,  -265,  -275,  -580,   -81,  -416,   -93,  -307,  -609,
  -346,   -12,  -431,  -609,  -432,  -433,  -250,  -395,  -398,  -400,
  -387,  -610,  -571,  -552,  -570,  -516,  -517,  -517,  -543,  -517,
  -517,  -562,  -517,  -540,  -557,  -598,  -610,  -610,  -359,  -541,
  -610,  -344,  -610,  -610,  -318,  -610,   -12,  -416,  -610,  -416,
  -610,  -610,   -12,  -326,  -610,  -598,  -610,  -330,  -610,  -279,
  -416,   -38,  -200,  -260,  -610,  -239,   -12,   -61,  -571,  -571,
  -364,  -366,  -366,  -366,  -381,  -610,  -598,  -540,  -548,  -549,
  -559,  -422,   -10,   -12,  -437,  -347,  -610,  -610,  -435,   -12,
   -12,  -610,  -396,  -512,  -610,  -520,  -610,  -522,  -610,  -525,
  -610,  -528,  -530,  -351,  -353,  -355,  -358,  -314,  -610,  -315,
  -274,  -609,  -320,  -322,  -507,  -610,  -328,  -509,  -511,  -510,
  -471,  -425,  -610,  -362,  -363,  -372,  -374,  -610,  -377,  -610,
  -379,  -384,  -610,  -610,  -547,  -610,  -436,   -12,  -500,  -501,
  -610,  -610,  -290,  -434,  -610,  -610,  -598,  -389,  -391,  -392,
  -517,  -517,  -517,  -517,  -610,  -610,   -12,  -426,  -427,  -428,
  -324,   -12,  -571,  -550,  -365,  -366,  -366,  -366,  -366,  -560,
  -366,  -386,  -558,  -610,  -300,  -430,  -257,  -610,  -610,  -300,
  -399,  -401,  -388,  -610,  -610,  -518,  -521,  -523,  -526,  -356,
  -609,  -610,  -361,  -610,  -369,  -610,  -371,  -610,  -375,  -610,
  -378,  -380,  -299,  -589,  -429,  -598,  -585,  -586,  -589,  -299,
  -390,  -517,  -345,  -331,  -366,  -366,  -366,  -366,  -416,  -519,
  -610,  -367,  -370,  -373,  -376,  -366,  -368 ]

clist = [
'224,16,435,275,279,386,16,339,267,134,134,346,583,586,284,284,284,591',
'503,552,218,228,6,120,698,353,354,6,269,335,228,228,228,717,16,311,311',
'643,268,494,349,349,117,227,349,116,350,351,419,420,355,271,278,280',
'302,129,210,495,285,285,285,675,16,675,678,137,137,228,228,819,838,228',
'360,370,370,134,320,320,306,127,559,753,391,337,542,545,707,708,549',
'600,120,340,304,837,398,839,349,349,349,349,330,853,402,403,404,405',
'678,841,850,529,323,914,356,320,320,320,810,723,16,670,831,2,121,228',
'228,228,228,16,882,16,979,967,286,286,286,916,959,957,305,6,664,282',
'295,296,372,376,823,672,406,896,6,390,617,619,622,622,621,623,392,393',
'394,395,396,397,758,341,344,750,539,836,503,441,447,452,833,973,764',
'632,668,333,342,731,408,717,667,415,388,848,430,431,343,883,365,433',
'347,442,979,209,457,458,456,681,284,363,675,675,678,604,892,387,336',
'540,16,228,423,228,228,423,228,338,451,492,705,885,423,228,228,749,959',
'1020,914,862,461,607,400,414,425,608,16,425,756,418,418,929,1,915,425',
'876,662,407,884,736,999,886,956,975,550,284,284,827,348,432,704,899',
'799,900,284,845,455,491,838,497,498,228,228,426,802,,426,,,,228,559',
',426,,960,816,,805,508,968,,275,838,,526,279,841,16,942,285,,16,684',
',686,311,16,285,717,717,693,,523,413,120,976,541,977,513,747,,302,311',
'349,,29,302,,532,587,29,,,512,16,,511,,857,305,,,,,606,29,320,859,,',
'228,16,16,,29,29,29,,29,515,610,594,903,320,521,530,838,,567,,514,228',
'120,286,870,739,527,1022,767,519,767,286,496,1024,,748,29,228,269,,499',
'29,29,,590,29,,856,609,971,,,,812,,305,134,,933,934,305,441,447,644',
'789,650,,,,794,775,655,865,866,639,,717,717,,675,678,,,,,442,752,,,456',
',433,29,,826,284,,29,29,29,29,29,631,29,,588,589,,,,451,228,137,649',
',815,650,663,1014,654,,,,689,,,,,,,,,689,559,559,,,,,,,,,,,,,442,,,',
',1002,,284,695,442,,697,345,16,,,812,666,,,,311,,228,,451,,459,,311',
',,,,451,824,,,228,29,29,29,29,29,29,29,,689,,,,29,29,29,744,689,,,947',
',,,320,,530,29,,,,,320,442,530,,567,,,,284,442,966,860,969,500,16,864',
',16,284,,,,441,447,228,,451,,,,29,29,451,,228,674,516,732,16,29,,,,',
'804,,442,1028,,,,738,,284,786,788,751,29,,791,793,29,,134,,16,29,,423',
'228,,451,16,644,825,,703,,423,423,,,803,423,423,,772,,,,425,416,429',
'780,29,,650,644,,655,425,425,,,,425,425,,,771,29,29,29,,311,,830,867',
'728,137,,730,785,787,925,311,,790,792,426,,29,,,,,,,931,426,426,,,,426',
'426,,29,,,644,,,,349,320,,530,418,644,861,,955,567,,567,320,505,817',
'507,,,509,510,,16,,,784,,16,228,,,16,,644,134,,872,656,,,,894,16,,,898',
',,1015,786,788,793,791,,567,567,936,938,940,,423,,,,,,830,,29,,,,,,669',
',,,673,,1001,,425,,711,713,715,,16,,,,,,682,,13,,,16,685,13,,349,871',
',,,887,918,,,,832,,,,29,,701,,426,,,,,858,29,872,13,228,,,,16,,,,,,16',
',29,635,830,,868,,,,1004,1006,1008,1010,16,1011,,13,924,,,,,928,,,944',
'364,,,,16,,,,950,,16,16,,,,,,,,,,29,757,,29,891,,,,,,29,1031,1032,1033',
'1034,895,567,,,320,29,,1036,,29,13,992,879,320,689,,,,982,13,,13,16',
',840,676,842,345,987,679,,,887,,887,921,29,,442,29,29,16,,29,,284,16',
',,29,29,,,,29,29,,26,451,320,,228,26,451,,,676,,,345,644,,946,818,,',
',26,954,,,,,,,,26,26,26,,26,,,,724,,,,,849,887,,,,13,,421,,,421,,,,888',
',429,421,,26,,881,,,26,26,,985,26,834,,13,834,,,,,972,,,879,,879,,879',
',1000,29,,,,,29,29,,,29,,,,773,,905,907,,909,911,29,912,676,345,,,,',
'26,,,,,26,26,26,26,26,29,26,,,,,,,13,,,,13,,,,813,13,,814,,,,879,,879',
',879,29,879,,,961,,962,,963,913,822,29,,,,,,13,880,,,,879,,,888,,844',
'888,927,888,,888,,13,13,,978,,980,,,29,,,,29,,,,,,29,,,,26,26,26,26',
'26,26,26,,,,29,,26,26,26,,,995,996,997,998,,,,,,26,29,,869,,,,29,29',
',,,1021,,888,,888,,888,,888,1025,,1026,,1027,,,,,,,,,,26,26,,,,,888',
',,26,,,,1035,,,,1029,,,29,,,,,834,,26,880,,880,26,880,,,,26,,,29,,,',
',29,,,,,920,,,,,,,,,,29,,,,,26,,,345,,,,,,,,,13,,,,26,26,26,,,,,,,,',
',,,,,880,,880,,880,26,880,,,,,,,,,,,,,,,26,,,,,,880,,,,,,,,,,,,,,,,',
',,,,,,,13,,,13,,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,17,26,,,,17',
',,13,,,421,,,,13,,,,,,421,421,,,,421,421,,,,,,17,313,313,,,,,,,,,,,',
',,,26,,,,,,,,,,26,17,,,,,,,,,,362,371,371,,26,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,17,13,,,26,,13,26,,17,13,17,,,26,,,,,,,13,,,26,,',
',26,,,,,,,,,,,421,,,,,,,,15,,,,,15,,,26,,,26,26,,,26,,,,,13,26,26,,',
',26,26,,,,13,,15,,,,,,,,,,,,,,17,,424,,,424,,,,,,,424,,15,,,,,13,,,',
',,13,17,,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,13,,,,953,,13,13,,,,,,,15,26',
',,,,26,26,,15,26,15,,,,,,,17,,,26,17,,,,313,17,,,,,,,,,,,,26,13,,,313',
',,,,,,,,,,,17,,,,13,,,,,13,,,26,,,,,17,17,,,,,26,,,,,,,,,,,,,,,,15,',
'15,,,15,,,,,,,15,,,26,,,,26,,,,,,26,15,,,,,,,,,,,,,26,,,,,,,38,,,,,38',
',,,,26,,,,,,26,26,,,,,,,,,,,,,,,,38,309,309,,,,,,,15,,,,15,,,,,15,,',
',,,,,,,38,,,26,,,,,,,358,374,374,374,,,,,15,,,,26,,,,,26,,,17,,,,,15',
'15,,313,,,,26,,,,313,,,,,,,,,,38,,,,,,,,,38,,38,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,17,,,17,,,,,,,,,,,,,,,,,,,,,17,,,,,,,763,,,,,,,,,,,,,,',
',,,38,,17,,,424,,,,17,,,,,,424,424,,,,424,424,,,,,38,,,,,,,,,,,39,,',
',,39,,15,,,,,,,313,,,,,,,,,,,313,,,,,,,,39,310,310,,,,,,,,,,,,,,,,38',
',,,38,,,,309,38,39,,,,,,,,,,359,375,375,375,17,309,,15,,17,15,,,17,',
',,38,,,,,,,17,,,,,,,15,,,38,38,,,,,,,424,,,,39,,,,,,,,,39,,39,15,,,15',
',,,15,,,,,17,15,15,,,,15,15,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'17,,,,,,17,,,,,,,,,,,,,,17,,,,39,,,,,,,,371,,,,,17,,,,952,,17,17,,,',
',,39,,15,,,,,15,,,,15,,,,,,,,,,,15,,,,,38,,,,,,,,309,,371,,,15,17,,309',
',,,,,,,,,,,,,,,,17,,39,,,17,39,,15,,310,39,,,,,,,,15,,,,,,,,310,,,,',
',,,,,,38,39,,38,,,,,,,,,,,,,15,,39,39,,,15,,38,,,,,,,,,,,,15,,,,,,,',
',,,,,,,38,,15,,,,,38,15,15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,309',
',,,,,,15,,,,309,,,,,,,,,,,,,,,15,,,,,15,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',38,,,,,38,,,,38,,,,,,,39,,,,38,,,,310,,,,,,,,310,,,,,,,,,,,,,,,,,,',
',,,,,,,235,,,,,,,,38,283,283,283,,,,,,,,38,,328,329,,331,332,,334,,39',
',,39,,,,,,,,,,283,283,,,,,,,,,,39,38,,,,,,38,,,,,,,,,,,,,,38,,,,,,39',
',,,,,374,39,,,,38,,,,948,,38,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,310,,',
',,,,,,,,310,374,,,,38,,,,,,,,,,,,,,,,,,,38,,,,,38,,,,,,,,,,,,,,,,,,',
',,39,,283,428,,39,434,283,,39,,,,434,,,,,,,39,,,,,,235,,,468,469,470',
'471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487',
'488,489,,,,,490,,,,,,,283,283,,,39,,,,,283,,,,,,39,283,,283,,,283,283',
',,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,,39,,,,,535,,536,,,,,,,39,,,,,,,,',
',,,375,,,,,39,,,,949,,39,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,375,,,,39,,,,283,,,,,,,,,,,,,,,39,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,',
'283,,434,434,434,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,283,,283,,283,,,',
',,,,,,,,,,,,283,,,,,,,,,434,,,696,,,,,,,,,283,,,283,,,,,,,,,,,,,,,,',
',,,,,,,,283,,,,,,,,,,,,,,,,,,,,,283,283,,,,,,,,,,283,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,283,434,283,,,,781,,,283,283,434,434,,,,434,434,,,',
',,,,,,,,,,,,,,,,,,,,283,,,283,,,,,,,,,,,,,,,,,,,283,,,,,,,,,,,,,,,,',
'283,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,283,,,',
',,,,434,,,,,,,,,,,,,434,434,434,434,,875,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,283,,,,,,,,,,,,,,,,,,283,434,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,283' ]
        racc_goto_table = arr = ::Array.new(3635, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'34,29,30,79,79,63,29,75,140,64,64,94,97,97,39,39,39,99,81,139,32,29',
'7,102,11,36,36,7,32,34,29,29,29,115,29,29,29,31,42,45,25,25,6,21,25',
'4,18,18,23,23,18,44,44,44,52,16,16,30,76,76,76,82,29,82,186,66,66,29',
'29,12,177,29,29,29,29,64,71,71,56,8,171,103,157,7,77,77,122,122,77,61',
'102,76,53,128,157,128,25,25,25,25,69,12,18,18,18,18,186,182,98,58,57',
'114,4,71,71,71,129,116,29,46,131,2,5,29,29,29,29,29,127,29,183,151,78',
'78,78,117,134,133,10,7,143,51,51,51,62,62,152,143,7,153,7,156,162,162',
'162,162,161,161,158,159,160,163,164,165,166,78,78,170,9,175,81,43,43',
'43,179,180,167,67,48,72,74,37,26,115,80,24,92,115,25,25,93,128,20,68',
'96,79,183,17,25,25,68,15,39,100,82,82,186,101,13,104,105,106,29,29,29',
'29,29,29,29,107,64,43,139,131,29,29,29,108,134,133,114,109,32,110,5',
'21,21,111,29,21,112,76,76,113,1,118,21,129,30,2,119,99,117,125,132,127',
'135,39,39,136,137,27,138,141,31,142,39,116,27,144,177,146,147,29,29',
'19,150,,19,,,,29,171,,19,,128,31,,46,157,12,,79,177,,34,79,182,29,131',
'76,,29,58,,30,29,29,76,115,115,58,,32,10,102,128,34,128,7,61,,52,29',
'25,,50,52,,32,18,50,,,6,29,,4,,31,10,,,,,25,50,71,31,,,29,29,29,,50',
'50,50,,50,53,25,32,122,71,53,56,177,,176,,8,29,102,78,31,30,69,98,162',
'57,162,78,51,128,,30,50,29,32,,51,50,50,,4,50,,97,42,103,,,,81,,10,64',
',122,122,10,43,43,34,45,79,,,,45,30,79,139,139,32,,115,115,,82,186,',
',,,79,9,,,68,,68,50,,77,39,,50,50,50,50,50,16,50,,10,10,,,,64,29,66',
'44,,58,79,34,11,44,,,,43,,,,,,,,,43,171,171,,,,,,,,,,,,,79,,,,,122,',
'39,68,79,,25,73,29,,,81,44,,,,29,,29,,64,,54,,29,,,,,64,23,,,29,50,50',
'50,50,50,50,50,,43,,,,50,50,50,36,43,,,97,,,,71,,56,50,,,,,71,79,56',
',176,,,,39,79,97,9,99,54,29,9,,29,39,,,,43,43,29,,64,,,,50,50,64,,29',
'78,54,102,29,50,,,,,94,,79,31,,,,76,,39,68,68,102,50,,68,68,50,,64,',
'29,50,,29,29,,64,29,34,75,,78,,29,29,,,140,29,29,,7,,,,21,73,73,7,50',
',79,34,,79,21,21,,,,21,21,,,16,50,50,50,,29,,34,63,10,66,,10,27,27,9',
'29,,27,27,19,,50,,,,,,,9,19,19,,,,19,19,,50,,,34,,,,25,71,,56,76,34',
'18,,9,176,,176,71,73,56,73,,,73,73,,29,,,78,,29,29,,,29,,34,64,,68,54',
',,,75,29,,,75,,,30,68,68,68,68,,176,176,124,124,124,,29,,,,,,34,,50',
',,,,,54,,,,54,,9,,21,,174,174,174,,29,,,,,,54,,22,,,29,54,22,,25,27',
',,,176,18,,,,121,,,,50,,54,,19,,,,,10,50,68,22,29,,,,29,,,,,,29,,50',
'73,34,,10,,,,124,124,124,124,29,124,,22,102,,,,,102,,,29,22,,,,29,,',
',29,,29,29,,,,,,,,,,50,54,,50,10,,,,,,50,124,124,124,124,10,176,,,71',
'50,,124,,50,22,34,121,71,43,,,,29,22,,22,29,,126,73,126,73,32,73,,,176',
',176,10,50,,79,50,50,29,,50,,39,29,,,50,50,,,,50,50,,47,64,71,,29,47',
'64,,,73,,,73,34,,10,54,,,,47,10,,,,,,,,47,47,47,,47,,,,73,,,,,54,176',
',,,22,,22,,,22,,,,178,,73,22,,47,,126,,,47,47,,10,47,123,,22,123,,,',
',121,,,121,,121,,121,,10,50,,,,,50,50,,,50,,,,73,,174,174,,174,174,50',
'174,73,73,,,,,47,,,,,47,47,47,47,47,50,47,,,,,,,22,,,,22,,,,73,22,,73',
',,,121,,121,,121,50,121,,,126,,126,,126,54,73,50,,,,,,22,123,,,,121',
',,178,,73,178,54,178,,178,,22,22,,126,,126,,,50,,,,50,,,,,,50,,,,47',
'47,47,47,47,47,47,,,,50,,47,47,47,,,174,174,174,174,,,,,,47,50,,73,',
',,50,50,,,,126,,178,,178,,178,,178,126,,126,,126,,,,,,,,,,47,47,,,,',
'178,,,47,,,,126,,,,174,,,50,,,,,123,,47,123,,123,47,123,,,,47,,,50,',
',,,50,,,,,73,,,,,,,,,,50,,,,,47,,,73,,,,,,,,,22,,,,47,47,47,,,,,,,,',
',,,,,123,,123,,123,47,123,,,,,,,,,,,,,,,47,,,,,,123,,,,,,,,,,,,,,,,',
',,,,,,,22,,,22,,,,,,,,,,,,,,,,,,,,,22,,,,,,,,,,,,,,,,,,,33,47,,,,33',
',,22,,,22,,,,22,,,,,,22,22,,,,22,22,,,,,,33,33,33,,,,,,,,,,,,,,,47,',
',,,,,,,,47,33,,,,,,,,,,33,33,33,,47,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,33,22,,,47,,22,47,,33,22,33,,,47,,,,,,,22,,,47,,,,47,,,,,,',
',,,,22,,,,,,,,28,,,,,28,,,47,,,47,47,,,47,,,,,22,47,47,,,,47,47,,,,22',
',28,,,,,,,,,,,,,,33,,33,,,33,,,,,,,33,,28,,,,,22,,,,,,22,33,,,,,,,,',
',,,,22,,,,,,,,,,,,,,,,,22,,,,22,,22,22,,,,,,,28,47,,,,,47,47,,28,47',
'28,,,,,,,33,,,47,33,,,,33,33,,,,,,,,,,,,47,22,,,33,,,,,,,,,,,,33,,,',
'22,,,,,22,,,47,,,,,33,33,,,,,47,,,,,,,,,,,,,,,,28,,28,,,28,,,,,,,28',
',,47,,,,47,,,,,,47,28,,,,,,,,,,,,,47,,,,,,,59,,,,,59,,,,,47,,,,,,47',
'47,,,,,,,,,,,,,,,,59,59,59,,,,,,,28,,,,28,,,,,28,,,,,,,,,,59,,,47,,',
',,,,59,59,59,59,,,,,28,,,,47,,,,,47,,,33,,,,,28,28,,33,,,,47,,,,33,',
',,,,,,,,59,,,,,,,,,59,,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,33,',
',,,,,,,,,,,,,,,,,,,33,,,,,,,33,,,,,,,,,,,,,,,,,,59,,33,,,33,,,,33,,',
',,,33,33,,,,33,33,,,,,59,,,,,,,,,,,60,,,,,60,,28,,,,,,,33,,,,,,,,,,',
'33,,,,,,,,60,60,60,,,,,,,,,,,,,,,,59,,,,59,,,,59,59,60,,,,,,,,,,60,60',
'60,60,33,59,,28,,33,28,,,33,,,,59,,,,,,,33,,,,,,,28,,,59,59,,,,,,,33',
',,,60,,,,,,,,,60,,60,28,,,28,,,,28,,,,,33,28,28,,,,28,28,,,,33,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,33,,,,,,,,,,,,,,33,,,,60,,,,,,',
',33,,,,,33,,,,33,,33,33,,,,,,60,,28,,,,,28,,,,28,,,,,,,,,,,28,,,,,59',
',,,,,,,59,,33,,,28,33,,59,,,,,,,,,,,,,,,,,33,,60,,,33,60,,28,,60,60',
',,,,,,,28,,,,,,,,60,,,,,,,,,,,59,60,,59,,,,,,,,,,,,,28,,60,60,,,28,',
'59,,,,,,,,,,,,28,,,,,,,,,,,,,,,59,,28,,,,,59,28,28,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,59,,,,,,,28,,,,59,,,,,,,,,,,,,,,28,,,,,28,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,59,,,,,59,,,,59,,,,,,,60,,,,59,,,,60,,,,,,',
',60,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,59,35,35,35,,,,,,,,59,,35,35',
',35,35,,35,,60,,,60,,,,,,,,,,35,35,,,,,,,,,,60,59,,,,,,59,,,,,,,,,,',
',,,59,,,,,,60,,,,,,59,60,,,,59,,,,59,,59,59,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,60,,,,,,,,,,,60,59,,,,59,,,,,,,,,,,,,,,,,,,59,,,,,59,,,,,,,,,',
',,,,,,,,,,,60,,35,35,,60,35,35,,60,,,,35,,,,,,,60,,,,,,35,,,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,,,,,35,,,,',
',,35,35,,,60,,,,,35,,,,,,60,35,,35,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,',
',,60,,,,,,60,,,,,35,,35,,,,,,,60,,,,,,,,,,,,60,,,,,60,,,,60,,60,60,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,60,,,,60,,,,35,,,,,,,,,,,,',
',,60,,,,,60,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,35,35,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,35,,35,,35,,,,,,,,,,,,,,,,35,,,,,,,,,35,,,35,,,,,,,',
',35,,,35,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,',
',,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,35,,,,35,,,35,35,35,35,',
',,35,35,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,35,,,,,,,,',
',,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'35,,,,,,,,35,,,,,,,,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3635, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   244,   121,   nil,    42,   117,    39,    22,    72,  -168,
   105,  -514,  -629,  -611,   nil,  -311,    47,   188,   -20,    62,
   121,    23,   819,  -164,   -27,   -26,    53,    45,  1609,     1,
  -215,  -398,     4,  1445,   -19,  2648,   -43,  -406,   nil,   -15,
   nil,   nil,    14,   -47,    25,  -232,  -378,   983,  -315,   nil,
   328,   112,    21,    59,   302,   nil,    44,    75,  -215,  1866,
  2114,  -279,    72,   -69,     1,   nil,    57,  -235,   -23,    57,
   nil,    42,   133,   449,   118,   -55,    29,  -256,   103,   -23,
  -308,  -268,  -441,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   112,   127,   -53,   nil,   129,  -338,  -620,  -339,
   132,  -165,    20,  -527,   135,   150,  -126,   158,  -377,  -520,
  -143,  -149,  -369,  -624,  -735,  -535,  -451,  -712,  -601,  -558,
   nil,   130,  -467,   348,  -102,  -555,   238,  -680,  -617,  -555,
   nil,  -585,  -647,  -764,  -765,   -92,  -445,   195,  -288,  -329,
   -14,  -565,  -564,  -351,     3,   nil,    -5,    -5,   nil,   nil,
  -389,  -790,  -553,  -674,   nil,   nil,    71,     0,    73,    73,
    73,  -238,  -240,    73,    73,    73,  -450,  -439,   nil,   nil,
  -438,  -268,   nil,   nil,   251,  -541,    23,  -640,   231,  -532,
  -757,   nil,  -605,  -807,   nil,   nil,  -440 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   357,   300,   nil,   nil,
   538,   nil,   851,   nil,   297,   298,   nil,   nil,   nil,    11,
    12,    18,   233,   nil,   nil,    14,   nil,   422,   234,   327,
   nil,   nil,   602,   232,   460,    21,   nil,   nil,   352,    22,
    23,    24,   nil,   692,   nil,   nil,   nil,   317,   nil,    25,
   314,   436,    32,   nil,   nil,    34,    37,    36,   nil,   229,
   230,   369,   nil,   136,   444,   135,    79,   nil,   427,    95,
    46,    49,   265,   289,   nil,   820,   437,   nil,   438,   449,
   651,   501,   287,   273,    50,    51,    52,    53,    54,    55,
    56,    57,    58,   nil,   274,    64,   nil,   nil,   nil,   nil,
   nil,   nil,   584,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   719,   566,   nil,   720,   721,   974,
   878,   554,   nil,   555,   nil,   nil,   556,   nil,   558,   nil,
   807,   nil,   nil,   nil,   564,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   448,   nil,   nil,   671,   665,
   nil,   nil,   nil,   nil,    78,    80,    81,   nil,   nil,   nil,
   nil,   nil,   612,   nil,   nil,   nil,   nil,   nil,    91,    92,
   nil,   835,   755,   553,   nil,   557,   843,   569,   571,   572,
   889,   575,   576,   890,   579,   582,   292 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 150, :_reduce_none,
  2, 151, :_reduce_2,
  0, 152, :_reduce_3,
  1, 152, :_reduce_4,
  3, 152, :_reduce_5,
  2, 152, :_reduce_6,
  1, 154, :_reduce_none,
  2, 154, :_reduce_8,
  3, 157, :_reduce_9,
  4, 158, :_reduce_10,
  2, 159, :_reduce_11,
  0, 163, :_reduce_12,
  1, 163, :_reduce_13,
  3, 163, :_reduce_14,
  2, 163, :_reduce_15,
  1, 164, :_reduce_none,
  2, 164, :_reduce_17,
  0, 175, :_reduce_18,
  4, 156, :_reduce_19,
  3, 156, :_reduce_20,
  3, 156, :_reduce_21,
  3, 156, :_reduce_22,
  2, 156, :_reduce_23,
  3, 156, :_reduce_24,
  3, 156, :_reduce_25,
  3, 156, :_reduce_26,
  3, 156, :_reduce_27,
  3, 156, :_reduce_28,
  4, 156, :_reduce_29,
  1, 156, :_reduce_none,
  3, 156, :_reduce_31,
  3, 156, :_reduce_32,
  5, 156, :_reduce_33,
  3, 156, :_reduce_34,
  1, 156, :_reduce_none,
  3, 168, :_reduce_36,
  3, 168, :_reduce_37,
  6, 168, :_reduce_38,
  5, 168, :_reduce_39,
  5, 168, :_reduce_40,
  5, 168, :_reduce_41,
  5, 168, :_reduce_42,
  3, 168, :_reduce_43,
  1, 176, :_reduce_none,
  3, 176, :_reduce_45,
  1, 176, :_reduce_none,
  1, 174, :_reduce_none,
  3, 174, :_reduce_48,
  3, 174, :_reduce_49,
  3, 174, :_reduce_50,
  2, 174, :_reduce_51,
  1, 174, :_reduce_none,
  1, 167, :_reduce_none,
  0, 187, :_reduce_54,
  3, 185, :_reduce_55,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 189, :_reduce_none,
  4, 189, :_reduce_59,
  0, 197, :_reduce_60,
  4, 194, :_reduce_61,
  1, 196, :_reduce_none,
  2, 188, :_reduce_63,
  3, 188, :_reduce_64,
  4, 188, :_reduce_65,
  5, 188, :_reduce_66,
  4, 188, :_reduce_67,
  5, 188, :_reduce_68,
  2, 188, :_reduce_69,
  2, 188, :_reduce_70,
  2, 188, :_reduce_71,
  2, 188, :_reduce_72,
  2, 188, :_reduce_73,
  1, 169, :_reduce_74,
  3, 169, :_reduce_75,
  1, 202, :_reduce_76,
  3, 202, :_reduce_77,
  1, 201, :_reduce_none,
  2, 201, :_reduce_79,
  3, 201, :_reduce_80,
  5, 201, :_reduce_81,
  2, 201, :_reduce_82,
  4, 201, :_reduce_83,
  2, 201, :_reduce_84,
  4, 201, :_reduce_85,
  1, 201, :_reduce_86,
  3, 201, :_reduce_87,
  1, 205, :_reduce_none,
  3, 205, :_reduce_89,
  2, 204, :_reduce_90,
  3, 204, :_reduce_91,
  1, 207, :_reduce_92,
  3, 207, :_reduce_93,
  1, 206, :_reduce_94,
  1, 206, :_reduce_95,
  4, 206, :_reduce_96,
  3, 206, :_reduce_97,
  3, 206, :_reduce_98,
  3, 206, :_reduce_99,
  3, 206, :_reduce_100,
  2, 206, :_reduce_101,
  1, 206, :_reduce_102,
  1, 171, :_reduce_103,
  1, 171, :_reduce_104,
  4, 171, :_reduce_105,
  3, 171, :_reduce_106,
  3, 171, :_reduce_107,
  3, 171, :_reduce_108,
  3, 171, :_reduce_109,
  2, 171, :_reduce_110,
  1, 171, :_reduce_111,
  1, 210, :_reduce_112,
  1, 210, :_reduce_none,
  2, 211, :_reduce_114,
  1, 211, :_reduce_115,
  3, 211, :_reduce_116,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 165, :_reduce_122,
  1, 165, :_reduce_none,
  1, 166, :_reduce_124,
  0, 216, :_reduce_125,
  4, 166, :_reduce_126,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  3, 184, :_reduce_198,
  3, 184, :_reduce_199,
  6, 184, :_reduce_200,
  5, 184, :_reduce_201,
  5, 184, :_reduce_202,
  5, 184, :_reduce_203,
  5, 184, :_reduce_204,
  4, 184, :_reduce_205,
  3, 184, :_reduce_206,
  3, 184, :_reduce_207,
  3, 184, :_reduce_208,
  2, 184, :_reduce_209,
  2, 184, :_reduce_210,
  2, 184, :_reduce_211,
  2, 184, :_reduce_212,
  3, 184, :_reduce_213,
  3, 184, :_reduce_214,
  3, 184, :_reduce_215,
  3, 184, :_reduce_216,
  3, 184, :_reduce_217,
  3, 184, :_reduce_218,
  4, 184, :_reduce_219,
  2, 184, :_reduce_220,
  2, 184, :_reduce_221,
  3, 184, :_reduce_222,
  3, 184, :_reduce_223,
  3, 184, :_reduce_224,
  3, 184, :_reduce_225,
  1, 184, :_reduce_none,
  3, 184, :_reduce_227,
  3, 184, :_reduce_228,
  3, 184, :_reduce_229,
  3, 184, :_reduce_230,
  3, 184, :_reduce_231,
  2, 184, :_reduce_232,
  2, 184, :_reduce_233,
  3, 184, :_reduce_234,
  3, 184, :_reduce_235,
  3, 184, :_reduce_236,
  3, 184, :_reduce_237,
  3, 184, :_reduce_238,
  6, 184, :_reduce_239,
  1, 184, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  3, 219, :_reduce_245,
  3, 219, :_reduce_246,
  1, 222, :_reduce_none,
  1, 223, :_reduce_none,
  2, 223, :_reduce_none,
  4, 223, :_reduce_250,
  2, 223, :_reduce_251,
  1, 217, :_reduce_none,
  3, 217, :_reduce_253,
  3, 228, :_reduce_254,
  0, 229, :_reduce_255,
  1, 229, :_reduce_none,
  0, 179, :_reduce_257,
  1, 179, :_reduce_none,
  2, 179, :_reduce_none,
  4, 179, :_reduce_260,
  2, 179, :_reduce_261,
  1, 200, :_reduce_262,
  2, 200, :_reduce_263,
  2, 200, :_reduce_264,
  4, 200, :_reduce_265,
  1, 200, :_reduce_266,
  0, 232, :_reduce_267,
  2, 193, :_reduce_268,
  2, 231, :_reduce_269,
  2, 230, :_reduce_270,
  0, 230, :_reduce_271,
  1, 225, :_reduce_272,
  2, 225, :_reduce_273,
  3, 225, :_reduce_274,
  4, 225, :_reduce_275,
  1, 173, :_reduce_276,
  1, 173, :_reduce_none,
  3, 172, :_reduce_278,
  4, 172, :_reduce_279,
  2, 172, :_reduce_280,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_291,
  0, 254, :_reduce_292,
  4, 220, :_reduce_293,
  0, 255, :_reduce_294,
  4, 220, :_reduce_295,
  0, 256, :_reduce_296,
  4, 220, :_reduce_297,
  3, 220, :_reduce_298,
  3, 220, :_reduce_299,
  2, 220, :_reduce_300,
  3, 220, :_reduce_301,
  3, 220, :_reduce_302,
  1, 220, :_reduce_303,
  4, 220, :_reduce_304,
  3, 220, :_reduce_305,
  1, 220, :_reduce_306,
  5, 220, :_reduce_307,
  4, 220, :_reduce_308,
  3, 220, :_reduce_309,
  2, 220, :_reduce_310,
  1, 220, :_reduce_none,
  2, 220, :_reduce_312,
  2, 220, :_reduce_313,
  6, 220, :_reduce_314,
  6, 220, :_reduce_315,
  4, 220, :_reduce_316,
  4, 220, :_reduce_317,
  5, 220, :_reduce_318,
  4, 220, :_reduce_319,
  6, 220, :_reduce_320,
  0, 257, :_reduce_321,
  6, 220, :_reduce_322,
  0, 258, :_reduce_323,
  7, 220, :_reduce_324,
  0, 259, :_reduce_325,
  5, 220, :_reduce_326,
  0, 260, :_reduce_327,
  6, 220, :_reduce_328,
  0, 261, :_reduce_329,
  0, 262, :_reduce_330,
  9, 220, :_reduce_331,
  1, 220, :_reduce_332,
  1, 220, :_reduce_333,
  1, 220, :_reduce_334,
  1, 220, :_reduce_335,
  3, 220, :_reduce_336,
  1, 178, :_reduce_none,
  1, 199, :_reduce_338,
  1, 246, :_reduce_none,
  1, 246, :_reduce_none,
  2, 246, :_reduce_341,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 247, :_reduce_none,
  5, 247, :_reduce_345,
  1, 161, :_reduce_none,
  2, 161, :_reduce_347,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  1, 263, :_reduce_350,
  3, 263, :_reduce_351,
  1, 266, :_reduce_352,
  3, 266, :_reduce_353,
  1, 265, :_reduce_none,
  3, 265, :_reduce_355,
  5, 265, :_reduce_356,
  1, 265, :_reduce_357,
  3, 265, :_reduce_358,
  2, 267, :_reduce_359,
  1, 267, :_reduce_360,
  4, 268, :_reduce_361,
  2, 268, :_reduce_362,
  2, 268, :_reduce_363,
  1, 268, :_reduce_364,
  2, 273, :_reduce_365,
  0, 273, :_reduce_366,
  6, 274, :_reduce_367,
  8, 274, :_reduce_368,
  4, 274, :_reduce_369,
  6, 274, :_reduce_370,
  4, 274, :_reduce_371,
  2, 274, :_reduce_none,
  6, 274, :_reduce_373,
  2, 274, :_reduce_374,
  4, 274, :_reduce_375,
  6, 274, :_reduce_376,
  2, 274, :_reduce_377,
  4, 274, :_reduce_378,
  2, 274, :_reduce_379,
  4, 274, :_reduce_380,
  1, 274, :_reduce_none,
  0, 278, :_reduce_382,
  1, 278, :_reduce_383,
  3, 279, :_reduce_384,
  1, 279, :_reduce_385,
  4, 279, :_reduce_386,
  1, 280, :_reduce_387,
  4, 280, :_reduce_388,
  1, 281, :_reduce_389,
  3, 281, :_reduce_390,
  1, 282, :_reduce_391,
  1, 282, :_reduce_none,
  0, 286, :_reduce_393,
  0, 287, :_reduce_394,
  4, 245, :_reduce_395,
  4, 284, :_reduce_396,
  1, 284, :_reduce_397,
  0, 290, :_reduce_398,
  4, 285, :_reduce_399,
  0, 291, :_reduce_400,
  4, 285, :_reduce_401,
  0, 293, :_reduce_402,
  4, 289, :_reduce_403,
  2, 190, :_reduce_404,
  4, 190, :_reduce_405,
  5, 190, :_reduce_406,
  5, 190, :_reduce_407,
  2, 244, :_reduce_408,
  4, 244, :_reduce_409,
  4, 244, :_reduce_410,
  3, 244, :_reduce_411,
  3, 244, :_reduce_412,
  3, 244, :_reduce_413,
  2, 244, :_reduce_414,
  1, 244, :_reduce_415,
  4, 244, :_reduce_416,
  0, 295, :_reduce_417,
  4, 243, :_reduce_418,
  0, 296, :_reduce_419,
  4, 243, :_reduce_420,
  0, 297, :_reduce_421,
  3, 195, :_reduce_422,
  0, 298, :_reduce_423,
  0, 299, :_reduce_424,
  4, 292, :_reduce_425,
  5, 248, :_reduce_426,
  1, 300, :_reduce_427,
  1, 300, :_reduce_none,
  6, 160, :_reduce_429,
  0, 160, :_reduce_430,
  1, 301, :_reduce_431,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  2, 302, :_reduce_434,
  1, 302, :_reduce_none,
  2, 162, :_reduce_436,
  1, 162, :_reduce_none,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 234, :_reduce_440,
  1, 304, :_reduce_441,
  2, 304, :_reduce_442,
  3, 305, :_reduce_443,
  1, 305, :_reduce_444,
  1, 305, :_reduce_445,
  3, 235, :_reduce_446,
  4, 236, :_reduce_447,
  3, 237, :_reduce_448,
  0, 309, :_reduce_449,
  3, 309, :_reduce_450,
  1, 310, :_reduce_451,
  2, 310, :_reduce_452,
  3, 239, :_reduce_453,
  0, 312, :_reduce_454,
  3, 312, :_reduce_455,
  3, 238, :_reduce_456,
  3, 240, :_reduce_457,
  0, 313, :_reduce_458,
  3, 313, :_reduce_459,
  0, 314, :_reduce_460,
  3, 314, :_reduce_461,
  0, 306, :_reduce_462,
  2, 306, :_reduce_463,
  0, 307, :_reduce_464,
  2, 307, :_reduce_465,
  0, 308, :_reduce_466,
  2, 308, :_reduce_467,
  1, 311, :_reduce_468,
  2, 311, :_reduce_469,
  0, 316, :_reduce_470,
  4, 311, :_reduce_471,
  1, 315, :_reduce_472,
  1, 315, :_reduce_473,
  1, 315, :_reduce_474,
  1, 315, :_reduce_475,
  1, 315, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 317, :_reduce_479,
  3, 318, :_reduce_480,
  1, 303, :_reduce_481,
  2, 303, :_reduce_482,
  1, 218, :_reduce_483,
  1, 218, :_reduce_484,
  1, 218, :_reduce_485,
  1, 218, :_reduce_486,
  1, 208, :_reduce_487,
  1, 208, :_reduce_488,
  1, 208, :_reduce_489,
  1, 208, :_reduce_490,
  1, 208, :_reduce_491,
  1, 208, :_reduce_492,
  1, 209, :_reduce_493,
  1, 209, :_reduce_494,
  1, 209, :_reduce_495,
  1, 209, :_reduce_496,
  1, 209, :_reduce_497,
  1, 209, :_reduce_498,
  1, 209, :_reduce_499,
  1, 241, :_reduce_500,
  1, 241, :_reduce_501,
  1, 177, :_reduce_502,
  1, 177, :_reduce_503,
  1, 182, :_reduce_504,
  1, 182, :_reduce_505,
  0, 319, :_reduce_506,
  4, 250, :_reduce_507,
  0, 250, :_reduce_508,
  3, 252, :_reduce_509,
  0, 321, :_reduce_510,
  3, 252, :_reduce_511,
  4, 320, :_reduce_512,
  2, 320, :_reduce_513,
  2, 320, :_reduce_514,
  1, 320, :_reduce_515,
  2, 323, :_reduce_516,
  0, 323, :_reduce_517,
  6, 288, :_reduce_518,
  8, 288, :_reduce_519,
  4, 288, :_reduce_520,
  6, 288, :_reduce_521,
  4, 288, :_reduce_522,
  6, 288, :_reduce_523,
  2, 288, :_reduce_524,
  4, 288, :_reduce_525,
  6, 288, :_reduce_526,
  2, 288, :_reduce_527,
  4, 288, :_reduce_528,
  2, 288, :_reduce_529,
  4, 288, :_reduce_530,
  1, 288, :_reduce_531,
  0, 288, :_reduce_532,
  1, 283, :_reduce_533,
  1, 283, :_reduce_534,
  1, 283, :_reduce_535,
  1, 283, :_reduce_536,
  1, 264, :_reduce_none,
  1, 264, :_reduce_538,
  1, 325, :_reduce_539,
  1, 326, :_reduce_540,
  3, 326, :_reduce_541,
  1, 275, :_reduce_542,
  3, 275, :_reduce_543,
  1, 327, :_reduce_544,
  2, 328, :_reduce_545,
  1, 328, :_reduce_546,
  2, 329, :_reduce_547,
  1, 329, :_reduce_548,
  1, 269, :_reduce_549,
  3, 269, :_reduce_550,
  1, 322, :_reduce_551,
  3, 322, :_reduce_552,
  1, 330, :_reduce_none,
  1, 330, :_reduce_none,
  2, 270, :_reduce_555,
  1, 270, :_reduce_556,
  3, 331, :_reduce_557,
  3, 332, :_reduce_558,
  1, 276, :_reduce_559,
  3, 276, :_reduce_560,
  1, 324, :_reduce_561,
  3, 324, :_reduce_562,
  1, 333, :_reduce_none,
  1, 333, :_reduce_none,
  2, 277, :_reduce_565,
  1, 277, :_reduce_566,
  1, 334, :_reduce_none,
  1, 334, :_reduce_none,
  2, 272, :_reduce_569,
  2, 271, :_reduce_570,
  0, 271, :_reduce_571,
  1, 253, :_reduce_none,
  3, 253, :_reduce_573,
  0, 242, :_reduce_574,
  2, 242, :_reduce_none,
  1, 227, :_reduce_576,
  3, 227, :_reduce_577,
  3, 335, :_reduce_578,
  2, 335, :_reduce_579,
  4, 335, :_reduce_580,
  2, 335, :_reduce_581,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 294, :_reduce_none,
  1, 294, :_reduce_none,
  1, 294, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 181, :_reduce_594,
  1, 181, :_reduce_595,
  0, 153, :_reduce_none,
  1, 153, :_reduce_none,
  0, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 203, :_reduce_600,
  2, 180, :_reduce_601,
  0, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 251, :_reduce_605,
  1, 251, :_reduce_none,
  1, 155, :_reduce_none,
  2, 155, :_reduce_none,
  0, 224, :_reduce_609 ]

racc_reduce_n = 610

racc_shift_n = 1037

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tMETHREF => 143,
  :tBDOT2 => 144,
  :tBDOT3 => 145,
  :tNUMPARAM => 146,
  :tEQL => 147,
  :tLOWEST => 148 }

racc_nt_base = 149

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tMETHREF",
  "tBDOT2",
  "tBDOT3",
  "tNUMPARAM",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@2",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@3",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@4",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@5",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@15",
  "@16",
  "f_args",
  "do_block",
  "@17",
  "@18",
  "do_body",
  "@19",
  "operation3",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@25",
  "ssym",
  "dsym",
  "@26",
  "args_tail",
  "@27",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = val
                    
    result
end

def _reduce_10(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_12(val, _values, result)
                      result = []
                    
    result
end

def _reduce_13(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_18(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 30 omitted

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_33(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                                         nil, nil, nil,
                                                         nil, val[4])
                      begin_body = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.multi_assign(val[0], val[1], begin_body)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_43(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 46 omitted

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_49(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_51(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_55(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

def _reduce_59(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_60(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_64(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_74(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 78 omitted

def _reduce_79(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_80(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_81(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 88 omitted

def _reduce_89(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_97(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_99(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_112(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 113 omitted

def _reduce_114(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_115(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_116(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 123 omitted

def _reduce_124(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_125(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_126(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

def _reduce_198(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_204(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_205(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 226 omitted

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_239(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

def _reduce_245(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_246(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_251(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_254(val, _values, result)
                      result = val
                    
    result
end

def _reduce_255(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 256 omitted

def _reduce_257(val, _values, result)
                      result = []
                    
    result
end

# reduce 258 omitted

# reduce 259 omitted

def _reduce_260(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_264(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_265(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_267(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_268(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_270(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = []
                    
    result
end

def _reduce_272(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_274(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_275(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_276(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 277 omitted

def _reduce_278(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_279(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

def _reduce_291(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_292(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_293(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_294(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_296(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_302(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_304(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_305(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_307(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_310(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 311 omitted

def _reduce_312(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_313(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_314(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_315(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_318(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_319(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_321(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_322(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_323(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_325(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_326(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                    
    result
end

def _reduce_327(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:def)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_329(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_330(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:defs)
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_333(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_334(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_335(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

def _reduce_336(val, _values, result)
                      result = @builder.method_ref(val[0], val[1], val[2])
                    
    result
end

# reduce 337 omitted

def _reduce_338(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 339 omitted

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

def _reduce_345(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 346 omitted

def _reduce_347(val, _values, result)
                      result = val
                    
    result
end

# reduce 348 omitted

# reduce 349 omitted

def _reduce_350(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_353(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[0].
                                  push(val[2])
                    
    result
end

def _reduce_356(val, _values, result)
                      result = val[0].
                                  push(val[2]).
                                  concat(val[4])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = @builder.restarg(val[0], val[1])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = @builder.restarg(val[0])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_366(val, _values, result)
                      result = []
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_374(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_380(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 381 omitted

def _reduce_382(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_383(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_384(val, _values, result)
                      @lexer.max_numparam_stack.cant_have_numparams!
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_385(val, _values, result)
                      @lexer.max_numparam_stack.cant_have_numparams!
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_386(val, _values, result)
                      @lexer.max_numparam_stack.cant_have_numparams!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_387(val, _values, result)
                      result = []
                    
    result
end

def _reduce_388(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_390(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_391(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 392 omitted

def _reduce_393(val, _values, result)
                      @static_env.extend_dynamic
                      @lexer.max_numparam_stack.push
                      @context.push(:lambda)
                    
    result
end

def _reduce_394(val, _values, result)
                      @context.pop
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_395(val, _values, result)
                      args = @lexer.max_numparam > 0 ? @builder.numargs(@lexer.max_numparam) : val[1]
                      result = [ args, val[3] ]

                      @lexer.max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_396(val, _values, result)
                      @lexer.max_numparam_stack.cant_have_numparams!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_397(val, _values, result)
                      if val[0].any?
                        @lexer.max_numparam_stack.cant_have_numparams!
                      end
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_398(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_400(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_401(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_402(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_403(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_404(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_412(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_413(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_415(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_416(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_417(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_418(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_419(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_420(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_421(val, _values, result)
                      @static_env.extend_dynamic
                      @lexer.max_numparam_stack.push
                    
    result
end

def _reduce_422(val, _values, result)
                      args = @lexer.max_numparam > 0 ? @builder.numargs(@lexer.max_numparam) : val[1]
                      result = [ args, val[2] ]

                      @lexer.max_numparam_stack.pop
                      @static_env.unextend
                    
    result
end

def _reduce_423(val, _values, result)
                      @static_env.extend_dynamic
                      @lexer.max_numparam_stack.push
                    
    result
end

def _reduce_424(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_425(val, _values, result)
                      args = @lexer.max_numparam > 0 ? @builder.numargs(@lexer.max_numparam) : val[2]
                      result = [ args, val[3] ]

                      @lexer.max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_426(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 428 omitted

def _reduce_429(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = []
                    
    result
end

def _reduce_431(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 432 omitted

# reduce 433 omitted

def _reduce_434(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 437 omitted

# reduce 438 omitted

# reduce 439 omitted

def _reduce_440(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_441(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_442(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_443(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_444(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_445(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_447(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_448(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = []
                    
    result
end

def _reduce_450(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = []
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = []
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = []
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_462(val, _values, result)
                      result = []
                    
    result
end

def _reduce_463(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = []
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_466(val, _values, result)
                      result = []
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_471(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = @builder.numparam(val[0])
                    
    result
end

# reduce 476 omitted

# reduce 477 omitted

# reduce 478 omitted

def _reduce_479(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_480(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_482(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_483(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.numparam(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_503(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_505(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_506(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_507(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_508(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_509(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_510(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_511(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = []
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_527(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_528(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_529(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_530(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_531(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = []
                    
    result
end

def _reduce_533(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_534(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_535(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_536(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 537 omitted

def _reduce_538(val, _values, result)
                      @static_env.declare val[0][0]

                      @lexer.max_numparam_stack.cant_have_numparams!

                      result = val[0]
                    
    result
end

def _reduce_539(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_540(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_541(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_542(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_544(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      @lexer.max_numparam_stack.cant_have_numparams!

                      result = val[0]
                    
    result
end

def _reduce_545(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_546(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_547(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_548(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_549(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_550(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_551(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 553 omitted

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_556(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_557(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_558(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_559(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_560(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_561(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_562(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 563 omitted

# reduce 564 omitted

def _reduce_565(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_566(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 567 omitted

# reduce 568 omitted

def _reduce_569(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_570(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_571(val, _values, result)
                      result = []
                    
    result
end

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_574(val, _values, result)
                      result = []
                    
    result
end

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_577(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_578(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_579(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_580(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_581(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

# reduce 587 omitted

# reduce 588 omitted

# reduce 589 omitted

# reduce 590 omitted

# reduce 591 omitted

# reduce 592 omitted

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_595(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 596 omitted

# reduce 597 omitted

# reduce 598 omitted

# reduce 599 omitted

def _reduce_600(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_601(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

def _reduce_605(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

def _reduce_609(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby27
  end   # module Parser
